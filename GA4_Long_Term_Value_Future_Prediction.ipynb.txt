{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Copyright 2022 Google LLC\n",
        "#\n",
        "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "# you may not use this file except in compliance with the License.\n",
        "# You may obtain a copy of the License at\n",
        "#\n",
        "#     https://www.apache.org/licenses/LICENSE-2.0\n",
        "#\n",
        "# Unless required by applicable law or agreed to in writing, software\n",
        "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "# See the License for the specific language governing permissions and\n",
        "# limitations under the License.\n",
        "# Author : Lavi Nigam, ML Engineering @ Google\n",
        "# Linkedin: https://www.linkedin.com/in/lavinigam/"
      ],
      "metadata": {
        "id": "tpwX9ySYHqwm"
      },
      "id": "tpwX9ySYHqwm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<table align=\"left\">\n",
        "\n",
        "  <td>\n",
        "    <a href=\"https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/notebook_template.ipynb\">\n",
        "      <img src=\"https://cloud.google.com/ml-engine/images/colab-logo-32px.png\" alt=\"Colab logo\"> Run in Colab\n",
        "    </a>\n",
        "  </td>\n",
        "  <td>\n",
        "    <a href=\"https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/notebook_template.ipynb\">\n",
        "      <img src=\"https://cloud.google.com/ml-engine/images/github-logo-32px.png\" alt=\"GitHub logo\">\n",
        "      View on GitHub\n",
        "    </a>\n",
        "  </td>\n",
        "  <td>\n",
        "    <a href=\"https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/notebook_template.ipynb\">\n",
        "      <img src=\"https://lh3.googleusercontent.com/UiNooY4LUgW_oTvpsNhPpQzsstV5W8F7rYgxgGBD85cWJoLmrOzhVs_ksK_vgx40SHs7jCqkTkCk=e14-rj-sc0xffffff-h130-w32\" alt=\"Vertex AI logo\">\n",
        "      Open in Vertex AI Workbench\n",
        "    </a>\n",
        "  </td>\n",
        "</table>"
      ],
      "metadata": {
        "id": "aBoKd8UlHuMk"
      },
      "id": "aBoKd8UlHuMk"
    },
    {
      "cell_type": "markdown",
      "id": "0462bd41-ac34-4250-9307-3843e25f2a87",
      "metadata": {
        "id": "0462bd41-ac34-4250-9307-3843e25f2a87"
      },
      "source": [
        "## E-Commerce Future Long Term Value (LTV) prediction using using Google Analytics (GA4) Data"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f1bca8e3-ea6f-4a68-8358-659ff9fc6df0",
      "metadata": {
        "id": "f1bca8e3-ea6f-4a68-8358-659ff9fc6df0"
      },
      "source": [
        "Learn how to build a system to predict Long Term Value of a GA4 e-commerce user using BigQuery ML (BQML)."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Client Lifetime Value, also known as Lifetime Value (LTV) and Customer Lifetime Value (CLV), is an important measure that is used in marketing to indicate an estimate of the net profit that would result from an entire future connection with a customer. Nearly every action a company makes should be informed by LTV, but notably spending on advertising.\n",
        "\n",
        "Many marketers make an effort to target specific individuals or groups of users who are quite similar to one another with their adverts, but they do not always promote to their most valued consumers. In the context of business, the Pareto principle, which states that 20 percent of a company's clients are responsible for 80 percent of its revenue, is frequently invoked.\n",
        "\n",
        "What would happen if you were able to determine which of your clients will constitute that 20% of your business not just in the past but also in the future? Those consumers may be located through the process of predicting the customer lifetime value, also known as CLV.\n",
        "\n",
        "\n",
        "CLV models allow you to find answers to the following sorts of inquiries regarding customers:\n",
        "\n",
        "* Number of purchases: During a certain period of time in the future, how many separate purchases does the client anticipate making?\n",
        "* Lifetime: The amount of time that will elapse before the client is rendered completely inactive forever.\n",
        "\n",
        "Value in terms of currency How much value in terms of currency will the client create over a specific period of time in the future?\n",
        "\n",
        "There are two main difficulties to consider when attempting to forecast future lifetime value, each of which calls for its own unique set of data and modelling strategies:\n",
        "\n",
        "* Determine the future worth of existing consumers who have a known transaction history and make your predictions using that information.\n",
        "\n",
        "* Make an educated guess about the future worth of new consumers who have recently made their initial purchase."
      ],
      "metadata": {
        "id": "YAp7O3eu5iz_"
      },
      "id": "YAp7O3eu5iz_"
    },
    {
      "cell_type": "markdown",
      "id": "16051aa1-62b0-44a5-83ae-dd038f849eee",
      "metadata": {
        "id": "16051aa1-62b0-44a5-83ae-dd038f849eee"
      },
      "source": [
        "With recent changes, BigQuery ML can directly access GA4 data, bringing capture app and web data in a single interface. This integration opens many opportunities for various machine learning use cases and potential customers. For example, the e-commerce industry can funnel their GA4 data to BQML and expand their analytics with ML capabilities. This pattern aims to help such companies leverage different ML algorithms and scale their analytics with BQ."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Audience\n",
        "The pattern is intended for marketing analytics teams for an enterprise, or, teams explicitly responsible for analyzing Google Analytics data. It assumes that you have basic knowledge of the following:\n",
        "\n",
        "- Machine Learning concepts\n",
        "- Standard SQL & Python"
      ],
      "metadata": {
        "id": "lwYLPV4xUuAC"
      },
      "id": "lwYLPV4xUuAC"
    },
    {
      "cell_type": "markdown",
      "id": "9150b5b9-b8a0-443e-ac34-77033acec59a",
      "metadata": {
        "id": "9150b5b9-b8a0-443e-ac34-77033acec59a"
      },
      "source": [
        "## Costs\n",
        "This tutorial uses the following billable components of Google Cloud:\n",
        "\n",
        "- BigQuery\n",
        "- BigQuery ML\n",
        "- Cloud Storage\n",
        "\n",
        "\n",
        "To generate a cost estimate based on your projected usage, use the pricing calculator.\n",
        "\n",
        "Learn about\n",
        "- [BigQuery\n",
        "pricing](https://cloud.google.com/bigquery/pricing),\n",
        "- [BigQuery ML pricing](https://cloud.google.com/bigquery-ml/pricing),\n",
        "- [Cloud Storage\n",
        "pricing](https://cloud.google.com/storage/pricing),\n",
        "\n",
        "and use the [Pricing\n",
        "Calculator](https://cloud.google.com/products/calculator/)\n",
        "to generate a cost estimate based on your projected usage."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The Dataset\n",
        "The solution uses the public [GA4 Google Merchandise Store](https://console.cloud.google.com/bigquery?p=bigquery-public-data&d=ga4_obfuscated_sample_ecommerce) dataset.\n",
        "\n",
        "Google Merchandise Store is an online store that sells Google-branded merchandise. The site uses Google Analytics 4's standard web ecommerce implementation along with enhanced measurement. The ga4_obfuscated_sample_ecommerce dataset available through the BigQuery Public Datasets program and contains a sample of obfuscated BigQuery event export data for three months from 2020-11-01 to 2021-01-31.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "nSxUki7YZjJt"
      },
      "id": "nSxUki7YZjJt"
    },
    {
      "cell_type": "markdown",
      "source": [
        "This dataset contains obfuscated data that emulates what a real world dataset would look like from an actual Google Analytics 4 implementation. Certain fields will contain placeholder values including <Other>, NULL, and \" \" . Due to obfuscation, internal consistency of the dataset might be somewhat limited.\n",
        "\n"
      ],
      "metadata": {
        "id": "jx5ZSKnvw5fO"
      },
      "id": "jx5ZSKnvw5fO"
    },
    {
      "cell_type": "markdown",
      "source": [
        "To play with the data on your BQ Console, follow this [quick code](https://developers.google.com/analytics/bigquery/web-ecommerce-demo-dataset#using_the_dataset)\n",
        "\n",
        "You can check the schema details of the dataset [here](https://support.google.com/analytics/answer/7029846#zippy=)\n",
        "\n",
        "There are total 23 columns in the datasets with mixed datatypes, and approximately 4 million rows (each day event is seperate table in the data and total 92 events(tables) are present)."
      ],
      "metadata": {
        "id": "Du_xhjb2w8UF"
      },
      "id": "Du_xhjb2w8UF"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exporting Google Analytics data to BigQuery\n",
        "If instead of the sample data, you want to use your own data from a GA4 property, you can follow the instructions in [(GA4) Set up BigQuery ](https://support.google.com/analytics/answer/9823238#zippy=%2Cin-this-article) Export to export your data."
      ],
      "metadata": {
        "id": "lxvH0lhKdsP4"
      },
      "id": "lxvH0lhKdsP4"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Set up your local development environment\n",
        "\n",
        "**If you are using Colab or Google Cloud Notebooks**, your environment already meets\n",
        "all the requirements to run this notebook. You can skip this step."
      ],
      "metadata": {
        "id": "3Ro0D7_NIJ9t"
      },
      "id": "3Ro0D7_NIJ9t"
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Otherwise**, make sure your environment meets this notebook's requirements.\n",
        "You need the following:\n",
        "\n",
        "* The Google Cloud SDK\n",
        "* Python 3\n",
        "* Jupyter notebook running in a virtual environment with Python 3\n",
        "\n",
        "The Google Cloud guide to [Setting up a Python development\n",
        "environment](https://cloud.google.com/python/setup) and the [Jupyter\n",
        "installation guide](https://jupyter.org/install) provide detailed instructions\n",
        "for meeting these requirements. The following steps provide a condensed set of\n",
        "instructions:\n",
        "\n",
        "1. [Install and initialize the Cloud SDK.](https://cloud.google.com/sdk/docs/)\n",
        "\n",
        "1. [Install Python 3.](https://cloud.google.com/python/setup#installing_python)\n",
        "\n",
        "1. [Install\n",
        "   virtualenv](https://cloud.google.com/python/setup#installing_and_using_virtualenv)\n",
        "   and create a virtual environment that uses Python 3. Activate the virtual environment.\n",
        "\n",
        "1. To install Jupyter, run `pip3 install jupyter` on the\n",
        "command-line in a terminal shell.\n",
        "\n",
        "1. To launch Jupyter, run `jupyter notebook` on the command-line in a terminal shell.\n",
        "\n",
        "1. Open this notebook in the Jupyter Notebook Dashboard."
      ],
      "metadata": {
        "id": "naVsQIkoIKqi"
      },
      "id": "naVsQIkoIKqi"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Install additional packages\n",
        "\n",
        "Install additional package dependencies not installed in your notebook environment, such as {plotly.express, pandas, google.cloud}. Use the latest major GA version of each package."
      ],
      "metadata": {
        "id": "-kMgGax-IS1F"
      },
      "id": "-kMgGax-IS1F"
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# The Google Cloud Notebook product has specific requirements\n",
        "IS_GOOGLE_CLOUD_NOTEBOOK = os.path.exists(\"/opt/deeplearning/metadata/env_version\")\n",
        "\n",
        "# Google Cloud Notebook requires dependencies to be installed with '--user'\n",
        "USER_FLAG = \"\"\n",
        "if IS_GOOGLE_CLOUD_NOTEBOOK:\n",
        "    USER_FLAG = \"--user\""
      ],
      "metadata": {
        "id": "BNG1a0WFIWsR"
      },
      "id": "BNG1a0WFIWsR",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Restart the kernel\n",
        "\n",
        "After you install the additional packages, you need to restart the notebook kernel so it can find the packages."
      ],
      "metadata": {
        "id": "cmiF7wD2IXbk"
      },
      "id": "cmiF7wD2IXbk"
    },
    {
      "cell_type": "code",
      "source": [
        "# Automatically restart kernel after installs\n",
        "import os\n",
        "\n",
        "if not os.getenv(\"IS_TESTING\"):\n",
        "    # Automatically restart kernel after installs\n",
        "    import IPython\n",
        "\n",
        "    app = IPython.Application.instance()\n",
        "    app.kernel.do_shutdown(True)"
      ],
      "metadata": {
        "id": "Ng8iy7LaIa9q"
      },
      "id": "Ng8iy7LaIa9q",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Before you begin"
      ],
      "metadata": {
        "id": "bKoNzVCxIf7O"
      },
      "id": "bKoNzVCxIf7O"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Set up your Google Cloud project\n",
        "\n",
        "**The following steps are required, regardless of your notebook environment.**\n",
        "\n",
        "1. [Select or create a Google Cloud project](https://console.cloud.google.com/cloud-resource-manager). When you first create an account, you get a $300 free credit towards your compute/storage costs.\n",
        "\n",
        "2. [Make sure that billing is enabled for your project](https://cloud.google.com/billing/docs/how-to/modify-project).\n",
        "\n",
        "\n",
        "3. If you are running this notebook locally, you will need to install the [Cloud SDK](https://cloud.google.com/sdk).\n",
        "\n",
        "4. Enter your project ID in the cell below. Then run the cell to make sure the\n",
        "Cloud SDK uses the right project for all the commands in this notebook.\n",
        "\n",
        "**Note**: Jupyter runs lines prefixed with `!` as shell commands, and it interpolates Python variables prefixed with `$` into these commands."
      ],
      "metadata": {
        "id": "EFwFJmXZIgqV"
      },
      "id": "EFwFJmXZIgqV"
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Set your project ID\n",
        "\n",
        "**If you don't know your project ID**, you may be able to get your project ID using `gcloud`."
      ],
      "metadata": {
        "id": "WbtKuolkIo2k"
      },
      "id": "WbtKuolkIo2k"
    },
    {
      "cell_type": "code",
      "source": [
        "PROJECT_ID = \"\"\n",
        "\n",
        "# Get your Google Cloud project ID from gcloud\n",
        "if not os.getenv(\"IS_TESTING\"):\n",
        "    shell_output = !gcloud config list --format 'value(core.project)' 2>/dev/null\n",
        "    PROJECT_ID = shell_output[0]\n",
        "    print(\"Project ID: \", PROJECT_ID)"
      ],
      "metadata": {
        "id": "SsjOE5jkIsuU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b01f7276-dd91-4295-93ed-0aacb6e6225c"
      },
      "id": "SsjOE5jkIsuU",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Project ID:  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Otherwise, set your project ID here."
      ],
      "metadata": {
        "id": "S8aHk0AQIxlM"
      },
      "id": "S8aHk0AQIxlM"
    },
    {
      "cell_type": "code",
      "source": [
        "if PROJECT_ID == \"\" or PROJECT_ID is None:\n",
        "    PROJECT_ID = \"ga4-bq-pattern\"  # @param {type:\"string\"}"
      ],
      "metadata": {
        "id": "kbAokgs1Iz_o"
      },
      "id": "kbAokgs1Iz_o",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Authenticate your Google Cloud account\n",
        "\n",
        "**If you are using Google Cloud Notebooks**, your environment is already\n",
        "authenticated. Skip this step."
      ],
      "metadata": {
        "id": "vafnp9fDI-Jy"
      },
      "id": "vafnp9fDI-Jy"
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "\n",
        "# If you are running this notebook in Colab, run this cell and follow the\n",
        "# instructions to authenticate your GCP account. This provides access to your\n",
        "# Cloud Storage bucket and lets you submit training jobs and prediction\n",
        "# requests.\n",
        "\n",
        "# The Google Cloud Notebook product has specific requirements\n",
        "IS_GOOGLE_CLOUD_NOTEBOOK = os.path.exists(\"/opt/deeplearning/metadata/env_version\")\n",
        "\n",
        "# If on Google Cloud Notebooks, then don't execute this code\n",
        "if not IS_GOOGLE_CLOUD_NOTEBOOK:\n",
        "    if \"google.colab\" in sys.modules:\n",
        "        from google.colab import auth as google_auth\n",
        "\n",
        "        google_auth.authenticate_user()\n",
        "\n",
        "    # If you are running this notebook locally, replace the string below with the\n",
        "    # path to your service account key and run this cell to authenticate your GCP\n",
        "    # account.\n",
        "    elif not os.getenv(\"IS_TESTING\"):\n",
        "        %env GOOGLE_APPLICATION_CREDENTIALS ''"
      ],
      "metadata": {
        "id": "KmPLvdx-JFti"
      },
      "id": "KmPLvdx-JFti",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5cf783db-023f-41d1-8753-b194ccefc759",
      "metadata": {
        "id": "5cf783db-023f-41d1-8753-b194ccefc759"
      },
      "outputs": [],
      "source": [
        "# Importing some important libraries that will be used during the notebook\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "from google.cloud import bigquery"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Client manages connections to the BigQuery API and helps\n",
        "#bundle configuration (project, credentials) needed for API requests.\n",
        "client = bigquery.Client(PROJECT_ID)\n",
        "\n",
        "# to make sure all columns are displayed while working with dataframe\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.max_colwidth', 50)"
      ],
      "metadata": {
        "id": "u4AoPtwKSNhm"
      },
      "id": "u4AoPtwKSNhm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Assumptions"
      ],
      "metadata": {
        "id": "2_BpasBjb3eG"
      },
      "id": "2_BpasBjb3eG"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploratory Data Analysis (EDA)"
      ],
      "metadata": {
        "id": "oMutkEaqhJsJ"
      },
      "id": "oMutkEaqhJsJ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "You can start by defining some essential variables that can change according to your data. It is always better to consider the most recent records from your data as features. For this purpose, you can set the START_DATE and END_DATE based on your data recency.\n",
        "\n",
        "In this case, the date range is set for 3 months."
      ],
      "metadata": {
        "id": "Jj4q_owsvDI8"
      },
      "id": "Jj4q_owsvDI8"
    },
    {
      "cell_type": "code",
      "source": [
        "# Dataset (GA4 Google Merchandise Store) specific Variable\n",
        "# Change it to your dataset spefic values, if you want to use the code for your data.\n",
        "# We assume table names will be \"events_*\"\n",
        "PROJECT_ID_DATA = \"bigquery-public-data\"\n",
        "DATASET_ID_DATA = \"ga4_obfuscated_sample_ecommerce\" #ga4-bq-pattern.1crdata.fake_ga4 #ga4_obfuscated_sample_ecommerce\n",
        "START_DATE = \"20201101\"\n",
        "END_DATE = \"20210131\" # taking 3 months recent data.\n",
        "#In queries, these variables are editable so that you can put your project, dataset, and date,\n",
        "#making it easier for you to make the least amount of changes. Of course, you don't need to change\n",
        "#it for public data. But, for making the queries editable, it made sense to define them here.\n",
        "#You can run the whole notebook (mostly) with your data by changing values here."
      ],
      "metadata": {
        "id": "YI1pDBZMu5hm"
      },
      "id": "YI1pDBZMu5hm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "b9613d67-35cd-40c3-b7e4-f08926c7594f",
      "metadata": {
        "id": "b9613d67-35cd-40c3-b7e4-f08926c7594f"
      },
      "source": [
        "You can start the data exploration by returning the first five rows of data.\n",
        "The data has multiple event tables for each day. So, all the tables (events) could be queried by using events* as the wildcard.\n",
        "\n",
        "[GA4 Data Export Schema](https://support.google.com/analytics/answer/7029846#zippy=)\n",
        "\n",
        "Note: BigQuery export, by default, are [date sharded tables](https://cloud.google.com/bigquery/docs/partitioned-tables#dt_partition_shard)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "35270b17-147e-495f-8839-ffe363db0aa7",
      "metadata": {
        "id": "35270b17-147e-495f-8839-ffe363db0aa7",
        "outputId": "4d4eb9ef-e6d7-447b-af7e-c01d07175b4e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  event_date   event_timestamp       event_name  \\\n",
              "0   20210119  1611047060064340        page_view   \n",
              "1   20210119  1611047060064340    session_start   \n",
              "2   20210119  1611047140593634  user_engagement   \n",
              "3   20210119  1611047065178392        page_view   \n",
              "4   20210119  1611047060064340      first_visit   \n",
              "\n",
              "                                        event_params  \\\n",
              "0  [{'key': 'entrances', 'value': {'string_value'...   \n",
              "1  [{'key': 'ga_session_id', 'value': {'string_va...   \n",
              "2  [{'key': 'term', 'value': {'string_value': '<o...   \n",
              "3  [{'key': 'medium', 'value': {'string_value': '...   \n",
              "4  [{'key': 'session_engaged', 'value': {'string_...   \n",
              "\n",
              "   event_previous_timestamp  event_value_in_usd  event_bundle_sequence_id  \\\n",
              "0                      <NA>                 NaN               -8691723080   \n",
              "1                      <NA>                 NaN               -8691723080   \n",
              "2                      <NA>                 NaN                9885327539   \n",
              "3                      <NA>                 NaN               -5793063624   \n",
              "4                      <NA>                 NaN               -8691723080   \n",
              "\n",
              "   event_server_timestamp_offset user_id      user_pseudo_id  \\\n",
              "0                           <NA>    None  1022787.5167320418   \n",
              "1                           <NA>    None  1022787.5167320418   \n",
              "2                           <NA>    None  1022787.5167320418   \n",
              "3                           <NA>    None  1022787.5167320418   \n",
              "4                           <NA>    None  1022787.5167320418   \n",
              "\n",
              "                                        privacy_info user_properties  \\\n",
              "0  {'analytics_storage': None, 'ads_storage': Non...              []   \n",
              "1  {'analytics_storage': None, 'ads_storage': Non...              []   \n",
              "2  {'analytics_storage': None, 'ads_storage': Non...              []   \n",
              "3  {'analytics_storage': None, 'ads_storage': Non...              []   \n",
              "4  {'analytics_storage': None, 'ads_storage': Non...              []   \n",
              "\n",
              "   user_first_touch_timestamp                             user_ltv  \\\n",
              "0            1611047060064340  {'revenue': 0.0, 'currency': 'USD'}   \n",
              "1            1611047060064340  {'revenue': 0.0, 'currency': 'USD'}   \n",
              "2            1611047060064340  {'revenue': 0.0, 'currency': 'USD'}   \n",
              "3            1611047060064340  {'revenue': 0.0, 'currency': 'USD'}   \n",
              "4            1611047060064340  {'revenue': 0.0, 'currency': 'USD'}   \n",
              "\n",
              "                                              device  \\\n",
              "0  {'category': 'desktop', 'mobile_brand_name': '...   \n",
              "1  {'category': 'desktop', 'mobile_brand_name': '...   \n",
              "2  {'category': 'desktop', 'mobile_brand_name': '...   \n",
              "3  {'category': 'desktop', 'mobile_brand_name': '...   \n",
              "4  {'category': 'desktop', 'mobile_brand_name': '...   \n",
              "\n",
              "                                                 geo app_info  \\\n",
              "0  {'continent': 'Europe', 'sub_continent': 'East...     None   \n",
              "1  {'continent': 'Europe', 'sub_continent': 'East...     None   \n",
              "2  {'continent': 'Europe', 'sub_continent': 'East...     None   \n",
              "3  {'continent': 'Europe', 'sub_continent': 'East...     None   \n",
              "4  {'continent': 'Europe', 'sub_continent': 'East...     None   \n",
              "\n",
              "                                      traffic_source   stream_id platform  \\\n",
              "0  {'medium': '<Other>', 'name': '<Other>', 'sour...  2100450278      WEB   \n",
              "1  {'medium': '<Other>', 'name': '<Other>', 'sour...  2100450278      WEB   \n",
              "2  {'medium': '<Other>', 'name': '<Other>', 'sour...  2100450278      WEB   \n",
              "3  {'medium': '<Other>', 'name': '<Other>', 'sour...  2100450278      WEB   \n",
              "4  {'medium': '<Other>', 'name': '<Other>', 'sour...  2100450278      WEB   \n",
              "\n",
              "  event_dimensions                                          ecommerce items  \n",
              "0             None  {'total_item_quantity': None, 'purchase_revenu...    []  \n",
              "1             None  {'total_item_quantity': None, 'purchase_revenu...    []  \n",
              "2             None  {'total_item_quantity': None, 'purchase_revenu...    []  \n",
              "3             None  {'total_item_quantity': None, 'purchase_revenu...    []  \n",
              "4             None  {'total_item_quantity': None, 'purchase_revenu...    []  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0662f3f-cae0-48d8-8fe3-d4b67b8d5c8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event_date</th>\n",
              "      <th>event_timestamp</th>\n",
              "      <th>event_name</th>\n",
              "      <th>event_params</th>\n",
              "      <th>event_previous_timestamp</th>\n",
              "      <th>event_value_in_usd</th>\n",
              "      <th>event_bundle_sequence_id</th>\n",
              "      <th>event_server_timestamp_offset</th>\n",
              "      <th>user_id</th>\n",
              "      <th>user_pseudo_id</th>\n",
              "      <th>privacy_info</th>\n",
              "      <th>user_properties</th>\n",
              "      <th>user_first_touch_timestamp</th>\n",
              "      <th>user_ltv</th>\n",
              "      <th>device</th>\n",
              "      <th>geo</th>\n",
              "      <th>app_info</th>\n",
              "      <th>traffic_source</th>\n",
              "      <th>stream_id</th>\n",
              "      <th>platform</th>\n",
              "      <th>event_dimensions</th>\n",
              "      <th>ecommerce</th>\n",
              "      <th>items</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20210119</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>page_view</td>\n",
              "      <td>[{'key': 'entrances', 'value': {'string_value'...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-8691723080</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>None</td>\n",
              "      <td>1022787.5167320418</td>\n",
              "      <td>{'analytics_storage': None, 'ads_storage': Non...</td>\n",
              "      <td>[]</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>{'revenue': 0.0, 'currency': 'USD'}</td>\n",
              "      <td>{'category': 'desktop', 'mobile_brand_name': '...</td>\n",
              "      <td>{'continent': 'Europe', 'sub_continent': 'East...</td>\n",
              "      <td>None</td>\n",
              "      <td>{'medium': '&lt;Other&gt;', 'name': '&lt;Other&gt;', 'sour...</td>\n",
              "      <td>2100450278</td>\n",
              "      <td>WEB</td>\n",
              "      <td>None</td>\n",
              "      <td>{'total_item_quantity': None, 'purchase_revenu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20210119</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>session_start</td>\n",
              "      <td>[{'key': 'ga_session_id', 'value': {'string_va...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-8691723080</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>None</td>\n",
              "      <td>1022787.5167320418</td>\n",
              "      <td>{'analytics_storage': None, 'ads_storage': Non...</td>\n",
              "      <td>[]</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>{'revenue': 0.0, 'currency': 'USD'}</td>\n",
              "      <td>{'category': 'desktop', 'mobile_brand_name': '...</td>\n",
              "      <td>{'continent': 'Europe', 'sub_continent': 'East...</td>\n",
              "      <td>None</td>\n",
              "      <td>{'medium': '&lt;Other&gt;', 'name': '&lt;Other&gt;', 'sour...</td>\n",
              "      <td>2100450278</td>\n",
              "      <td>WEB</td>\n",
              "      <td>None</td>\n",
              "      <td>{'total_item_quantity': None, 'purchase_revenu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20210119</td>\n",
              "      <td>1611047140593634</td>\n",
              "      <td>user_engagement</td>\n",
              "      <td>[{'key': 'term', 'value': {'string_value': '&lt;o...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9885327539</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>None</td>\n",
              "      <td>1022787.5167320418</td>\n",
              "      <td>{'analytics_storage': None, 'ads_storage': Non...</td>\n",
              "      <td>[]</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>{'revenue': 0.0, 'currency': 'USD'}</td>\n",
              "      <td>{'category': 'desktop', 'mobile_brand_name': '...</td>\n",
              "      <td>{'continent': 'Europe', 'sub_continent': 'East...</td>\n",
              "      <td>None</td>\n",
              "      <td>{'medium': '&lt;Other&gt;', 'name': '&lt;Other&gt;', 'sour...</td>\n",
              "      <td>2100450278</td>\n",
              "      <td>WEB</td>\n",
              "      <td>None</td>\n",
              "      <td>{'total_item_quantity': None, 'purchase_revenu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20210119</td>\n",
              "      <td>1611047065178392</td>\n",
              "      <td>page_view</td>\n",
              "      <td>[{'key': 'medium', 'value': {'string_value': '...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-5793063624</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>None</td>\n",
              "      <td>1022787.5167320418</td>\n",
              "      <td>{'analytics_storage': None, 'ads_storage': Non...</td>\n",
              "      <td>[]</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>{'revenue': 0.0, 'currency': 'USD'}</td>\n",
              "      <td>{'category': 'desktop', 'mobile_brand_name': '...</td>\n",
              "      <td>{'continent': 'Europe', 'sub_continent': 'East...</td>\n",
              "      <td>None</td>\n",
              "      <td>{'medium': '&lt;Other&gt;', 'name': '&lt;Other&gt;', 'sour...</td>\n",
              "      <td>2100450278</td>\n",
              "      <td>WEB</td>\n",
              "      <td>None</td>\n",
              "      <td>{'total_item_quantity': None, 'purchase_revenu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20210119</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>first_visit</td>\n",
              "      <td>[{'key': 'session_engaged', 'value': {'string_...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-8691723080</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>None</td>\n",
              "      <td>1022787.5167320418</td>\n",
              "      <td>{'analytics_storage': None, 'ads_storage': Non...</td>\n",
              "      <td>[]</td>\n",
              "      <td>1611047060064340</td>\n",
              "      <td>{'revenue': 0.0, 'currency': 'USD'}</td>\n",
              "      <td>{'category': 'desktop', 'mobile_brand_name': '...</td>\n",
              "      <td>{'continent': 'Europe', 'sub_continent': 'East...</td>\n",
              "      <td>None</td>\n",
              "      <td>{'medium': '&lt;Other&gt;', 'name': '&lt;Other&gt;', 'sour...</td>\n",
              "      <td>2100450278</td>\n",
              "      <td>WEB</td>\n",
              "      <td>None</td>\n",
              "      <td>{'total_item_quantity': None, 'purchase_revenu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0662f3f-cae0-48d8-8fe3-d4b67b8d5c8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a0662f3f-cae0-48d8-8fe3-d4b67b8d5c8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a0662f3f-cae0-48d8-8fe3-d4b67b8d5c8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "query = f\"\"\"\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  `{PROJECT_ID_DATA}.{DATASET_ID_DATA}.events*`\n",
        "LIMIT\n",
        "  5\n",
        "\"\"\"\n",
        "query_job = client.query(query)\n",
        "top5_data = query_job.to_dataframe()\n",
        "top5_data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e665b736-7c46-4131-a1fa-d050d40e30f4",
      "metadata": {
        "id": "e665b736-7c46-4131-a1fa-d050d40e30f4"
      },
      "source": [
        "The first five rows of data can help you understand the tables' composite structure of data types. For example, you can see numerical, categorical, Arrays, and Struct as data types. Using this information, later, you will be able to write specific `UNNEST` queries for [Arrays](https://cloud.google.com/bigquery/docs/reference/standard-sql/arrays#query_structs_in_an_array) & [Struct](https://cloud.google.com/bigquery/docs/reference/standard-sql/arrays#querying_array-type_fields_in_a_struct)."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "By looking at some columns, you can also identify a few essential features like event_date, event_name, user_ltv, device, geo, traffic_source, platform, and items. However, as discussed earlier, you still are not aware of their value distribution, availability, and data types."
      ],
      "metadata": {
        "id": "MXy4Sy-raeEr"
      },
      "id": "MXy4Sy-raeEr"
    },
    {
      "cell_type": "markdown",
      "source": [
        "You can check the data types of each column using [INFORMATION_SCHEMA](https://cloud.google.com/bigquery/docs/information-schema-tables) table. It can give you detailed metadata of your columns."
      ],
      "metadata": {
        "id": "qRGBRNZRYg7A"
      },
      "id": "qRGBRNZRYg7A"
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "SELECT\n",
        "  DISTINCT(column_name),\n",
        "  data_type\n",
        "FROM\n",
        "  `{PROJECT_ID_DATA}.{DATASET_ID_DATA}.INFORMATION_SCHEMA.COLUMNS`\n",
        "\"\"\"\n",
        "\n",
        "query_job = client.query(query)\n",
        "predict_data = query_job.to_dataframe()\n",
        "predict_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 770
        },
        "id": "rgE--AsdTJnd",
        "outputId": "b2ec2b4a-ae61-4740-ff10-355fd739dc73"
      },
      "id": "rgE--AsdTJnd",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      column_name  \\\n",
              "0                      event_date   \n",
              "1                 event_timestamp   \n",
              "2                      event_name   \n",
              "3                    event_params   \n",
              "4        event_previous_timestamp   \n",
              "5              event_value_in_usd   \n",
              "6        event_bundle_sequence_id   \n",
              "7   event_server_timestamp_offset   \n",
              "8                         user_id   \n",
              "9                  user_pseudo_id   \n",
              "10                   privacy_info   \n",
              "11                user_properties   \n",
              "12     user_first_touch_timestamp   \n",
              "13                       user_ltv   \n",
              "14                         device   \n",
              "15                            geo   \n",
              "16                       app_info   \n",
              "17                 traffic_source   \n",
              "18                      stream_id   \n",
              "19                       platform   \n",
              "20               event_dimensions   \n",
              "21                      ecommerce   \n",
              "22                          items   \n",
              "\n",
              "                                            data_type  \n",
              "0                                              STRING  \n",
              "1                                               INT64  \n",
              "2                                              STRING  \n",
              "3   ARRAY<STRUCT<key STRING, value STRUCT<string_v...  \n",
              "4                                               INT64  \n",
              "5                                             FLOAT64  \n",
              "6                                               INT64  \n",
              "7                                               INT64  \n",
              "8                                              STRING  \n",
              "9                                              STRING  \n",
              "10  STRUCT<analytics_storage INT64, ads_storage IN...  \n",
              "11  ARRAY<STRUCT<key INT64, value STRUCT<string_va...  \n",
              "12                                              INT64  \n",
              "13           STRUCT<revenue FLOAT64, currency STRING>  \n",
              "14  STRUCT<category STRING, mobile_brand_name STRI...  \n",
              "15  STRUCT<continent STRING, sub_continent STRING,...  \n",
              "16  STRUCT<id STRING, version STRING, install_stor...  \n",
              "17  STRUCT<medium STRING, name STRING, source STRING>  \n",
              "18                                              INT64  \n",
              "19                                             STRING  \n",
              "20                            STRUCT<hostname STRING>  \n",
              "21  STRUCT<total_item_quantity INT64, purchase_rev...  \n",
              "22  ARRAY<STRUCT<item_id STRING, item_name STRING,...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-136be019-22ae-4f7b-bdf7-55189f063d11\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>column_name</th>\n",
              "      <th>data_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>event_date</td>\n",
              "      <td>STRING</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>event_timestamp</td>\n",
              "      <td>INT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>event_name</td>\n",
              "      <td>STRING</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>event_params</td>\n",
              "      <td>ARRAY&lt;STRUCT&lt;key STRING, value STRUCT&lt;string_v...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>event_previous_timestamp</td>\n",
              "      <td>INT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>event_value_in_usd</td>\n",
              "      <td>FLOAT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>event_bundle_sequence_id</td>\n",
              "      <td>INT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>event_server_timestamp_offset</td>\n",
              "      <td>INT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>user_id</td>\n",
              "      <td>STRING</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>user_pseudo_id</td>\n",
              "      <td>STRING</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>privacy_info</td>\n",
              "      <td>STRUCT&lt;analytics_storage INT64, ads_storage IN...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>user_properties</td>\n",
              "      <td>ARRAY&lt;STRUCT&lt;key INT64, value STRUCT&lt;string_va...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>user_first_touch_timestamp</td>\n",
              "      <td>INT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>user_ltv</td>\n",
              "      <td>STRUCT&lt;revenue FLOAT64, currency STRING&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>device</td>\n",
              "      <td>STRUCT&lt;category STRING, mobile_brand_name STRI...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>geo</td>\n",
              "      <td>STRUCT&lt;continent STRING, sub_continent STRING,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>app_info</td>\n",
              "      <td>STRUCT&lt;id STRING, version STRING, install_stor...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>traffic_source</td>\n",
              "      <td>STRUCT&lt;medium STRING, name STRING, source STRING&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>stream_id</td>\n",
              "      <td>INT64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>platform</td>\n",
              "      <td>STRING</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>event_dimensions</td>\n",
              "      <td>STRUCT&lt;hostname STRING&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>ecommerce</td>\n",
              "      <td>STRUCT&lt;total_item_quantity INT64, purchase_rev...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>items</td>\n",
              "      <td>ARRAY&lt;STRUCT&lt;item_id STRING, item_name STRING,...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-136be019-22ae-4f7b-bdf7-55189f063d11')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-136be019-22ae-4f7b-bdf7-55189f063d11 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-136be019-22ae-4f7b-bdf7-55189f063d11');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "You can start by understanding overall data by getting a quick summary of the data, namely - total events  (event_count), total users (user_count), total days in the data (day_count), and total registered users of the platform (registered_user_id).\n",
        "This can help you get a sense of the scale of data."
      ],
      "metadata": {
        "id": "G29DgyP4vjgV"
      },
      "id": "G29DgyP4vjgV"
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "\n",
        "SELECT\n",
        "  COUNT(*) AS event_count,\n",
        "  COUNT(DISTINCT user_pseudo_id) AS user_count,\n",
        "  COUNT(DISTINCT event_date) AS day_count,\n",
        "  COUNT(DISTINCT user_id) AS registered_user_id\n",
        "FROM\n",
        "  `{PROJECT_ID_DATA}.{DATASET_ID_DATA}.events*`\n",
        "\"\"\"\n",
        "query_job = client.query(query)\n",
        "top5_data = query_job.to_dataframe()\n",
        "top5_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "rYSCfLhr6dUl",
        "outputId": "26412a6f-beae-43f0-bfb0-54189a4471e0"
      },
      "id": "rYSCfLhr6dUl",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   event_count  user_count  day_count  registered_user_id\n",
              "0      4295584      270154         92                   0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a4e61b1e-56ef-45bf-b99d-40ca56857983\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event_count</th>\n",
              "      <th>user_count</th>\n",
              "      <th>day_count</th>\n",
              "      <th>registered_user_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4295584</td>\n",
              "      <td>270154</td>\n",
              "      <td>92</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4e61b1e-56ef-45bf-b99d-40ca56857983')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a4e61b1e-56ef-45bf-b99d-40ca56857983 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a4e61b1e-56ef-45bf-b99d-40ca56857983');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As you can observe, there are roughly 4 million events with close to 270,000 users, stretched along 92 days of activity on the platform.\n",
        "\n",
        "There are no registered users data in the table. The user_pseudo_id is not a \"user_id\"; it is an client ID (cookie ID) for the user. This means that a single user can be represented as multiple pseudo_id in the data.\n",
        "\n",
        "For simplicity, we will assume that all user_pseudo_id are unique and represent a single user.\n",
        "\n",
        "If your data has 'user_id', use that directly, or else you can go ahead and use 'user_psuudo_id'.\n"
      ],
      "metadata": {
        "id": "trhmmrbiS334"
      },
      "id": "trhmmrbiS334"
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "Now, you can start by looking into `event_name` distribution.\n",
        "\n",
        "event_name is a significant column in this dataset. It contains all the events triggered as users interact with the Google Merchandise Store like page_view, scroll (scrolling the page), view_item (viewing specific item), etc. You can refer [here](https://developers.google.com/analytics/devguides/collection/ga4/reference/events) for a more detailed meaning of each event_name.\n"
      ],
      "metadata": {
        "id": "J4a69In4lqMh"
      },
      "id": "J4a69In4lqMh"
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "SELECT\n",
        "  event_name,\n",
        "  COUNT(*) as row_count\n",
        "FROM\n",
        "   `{PROJECT_ID_DATA}.{DATASET_ID_DATA}.events*`\n",
        "GROUP BY\n",
        "  event_name\n",
        "ORDER BY\n",
        "  row_count DESC\n",
        "\"\"\"\n",
        "query_job = client.query(query)\n",
        "result_df = query_job.to_dataframe()\n",
        "fig = px.bar(result_df, x=\"row_count\", y=\"event_name\",  title=\"Event Name Frequency Distribution\")\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "DbiCdEaxMCBY",
        "outputId": "af472999-1963-40e1-8564-2a22e7cd4a85"
      },
      "id": "DbiCdEaxMCBY",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"6883aa5c-8bdb-4928-9bbb-9c94fdbd8238\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"6883aa5c-8bdb-4928-9bbb-9c94fdbd8238\")) {                    Plotly.newPlot(                        \"6883aa5c-8bdb-4928-9bbb-9c94fdbd8238\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"row_count=%{x}<br>event_name=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[1350428,1058721,493072,386068,354970,257462,190104,58543,38757,31007,26172,19722,13899,9450,5692,1446,71],\"xaxis\":\"x\",\"y\":[\"page_view\",\"user_engagement\",\"scroll\",\"view_item\",\"session_start\",\"first_visit\",\"view_promotion\",\"add_to_cart\",\"begin_checkout\",\"select_item\",\"view_search_results\",\"add_shipping_info\",\"add_payment_info\",\"select_promotion\",\"purchase\",\"click\",\"view_item_list\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"row_count\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"event_name\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Event Name Frequency Distribution\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('6883aa5c-8bdb-4928-9bbb-9c94fdbd8238');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "You can observe a great imbalance in the frequency of different event_name(s). The top five events based on frequency:\n",
        "\n",
        "* page_view - User is viewing a page\n",
        "\n",
        "* user_engagement - Sessions that last 10 seconds or longer\n",
        "\n",
        "* scroll - User scrolling through a page\n",
        "\n",
        "* view_item - some content was shown to the user. You can use this to discover the most popular items.\n",
        "\n",
        "* session_start - User session after the engagement has been initiated.\n",
        "\n",
        "\n",
        "The other events don't have too many records and hence would be a challenge to be considered a feature. However, you can also notice that typical purchase events - \"add_to_cart\", \"begin_checkout\", \"add_shipping_info\", \"add_payment_info\", and \"purchase\" have a tiny amount of records, indicating that this data doesn't contain too many events where a user has bought something.\n",
        "\n",
        "\n",
        "So,`page_view` seems to be the best filter for the column `event_name` since it has the highest records and covers users' general browsing behavior. However, you can still leverage `add_to_cart` and `purchase` value for purchase information by simply counting a user's total events for these event types.\n",
        "\n",
        "Also, remember that the actual key of `page_view` event_name is available in event_params, and their values are in event_params.values.{int/float/string} in nested array format.\n",
        "\n",
        "Data references:\n",
        "\n",
        "[Dimensions & Metrics](https://support.google.com/analytics/topic/11151952?hl=en&ref_topic=9228654)\n"
      ],
      "metadata": {
        "id": "m1spMS_ysKE0"
      },
      "id": "m1spMS_ysKE0"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Engineering"
      ],
      "metadata": {
        "id": "1E_xbe1sdYkr"
      },
      "id": "1E_xbe1sdYkr"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now that you have done some basic exploration of GA4 data, you can create different features for LTV.\n",
        "\n",
        "However, before doing that, you should create a Dataset in BQ Console named \"ga4_ecomm_feature_set\" inside your project. Then, you can create a table for different kinds of features and store in the dataset.\n",
        "\n",
        "\n",
        "This will help retain the features for later purposes."
      ],
      "metadata": {
        "id": "qi7BCwzx644F"
      },
      "id": "qi7BCwzx644F"
    },
    {
      "cell_type": "code",
      "source": [
        "DATASET_NAME = \"ga4_ecomm_feature_set_ltv\"\n",
        "feature_table = \"ltv_features\"\n",
        "try:\n",
        "  dataset = client.create_dataset(DATASET_NAME, timeout=30)  # Make an API request.\n",
        "  print(\"Created dataset {}.{}\".format(client.project, dataset.dataset_id))\n",
        "except Exception as e:\n",
        "  print(e)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LNhYCNZGNoh1",
        "outputId": "e28d30ee-21f8-42b6-a813-e5911980f4df"
      },
      "id": "LNhYCNZGNoh1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "409 POST https://bigquery.googleapis.com/bigquery/v2/projects/ga4-bq-pattern/datasets?prettyPrint=false: Already Exists: Dataset ga4-bq-pattern:ga4_ecomm_feature_set_ltv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's start building features that can be leveraged to make models learn user behavior that can help predict future LTV based on given LTV values pre-computed in the dashboard. Our goal is to go over and beyond the default formula and model used in the dashboard for LTV. [Refer here](https://support.google.com/analytics/answer/9947257?hl=en) to learn more about default LTV value."
      ],
      "metadata": {
        "id": "9ZMg5HvvN5Av"
      },
      "id": "9ZMg5HvvN5Av"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since the feature-building query code will be significantly large, so for readability purposes, we are dividing the query into base feature table and final feature groups-bys.\n",
        "The base table will focus on features where core logic is implemented and multiple tables are created. Once they are created, we can make final aggregates and flags based on previously computed tables in the following query block."
      ],
      "metadata": {
        "id": "6uF84Paok5vC"
      },
      "id": "6uF84Paok5vC"
    },
    {
      "cell_type": "markdown",
      "source": [
        "High-Level Features:\n",
        "\n",
        "* engagement -> User Engagement - session_engaged value =  1.\n",
        "\n",
        "* bounces -> User Bounce - session_engaged value = 0.\n",
        "\n",
        "* returning_customers -> returning customers - if a user made multiple purchases (>=2) events on different dates.\n",
        "\n",
        "* non_returning_customers ->  non-returning customers - if a user has done single or no purchase events on all dates.\n",
        "\n",
        "*  repeated_purchase -> repeated purchase flag - total times purchase has been made. If it's >=0, then the actual number else 0.\n",
        "\n",
        "* events_sequence -> Event Sequence - order of event_name based on event_date.\n",
        "\n",
        "* grouped_events_sequence -> grouping all events\n",
        "\n",
        "* user_events_counted -> User Event counted - total events observed and tracked for the user.\n",
        "\n",
        "* pages -> various pages visited as part of page_view event; multiple levels (all links accessed after the landing page) are tracked.\n",
        "landing_page, second_page, exit page [three levels]\n",
        "\n",
        "          - pagepath_level_1\n",
        "          - previous_page_path_level_1\n",
        "          - landing_pagepath_level_1\n",
        "          - second_pagepath_level_1\n"
      ],
      "metadata": {
        "id": "l7kEQqkcdYDU"
      },
      "id": "l7kEQqkcdYDU"
    },
    {
      "cell_type": "code",
      "source": [
        "base_feature_tabel = f\"\"\"CREATE OR REPLACE TABLE `{DATASET_NAME}.{feature_table}` AS\n",
        "with engagement as (\n",
        "select\n",
        "   user_pseudo_id,\n",
        "   event_date,\n",
        "   SAFE_DIVIDE(\n",
        "       count(distinct case when session_engaged = 1 then concat(user_pseudo_id,session_id) end),\n",
        "       COUNT(DISTINCT session_id)\n",
        "   ) AS engagement_rate,\n",
        "   count(distinct case when session_engaged = 1 then concat(user_pseudo_id,session_id) end) as engaged_sessions,\n",
        "   count(distinct case when session_engaged = 0 then concat(user_pseudo_id,session_id) end) as bounces,\n",
        "   SAFE_DIVIDE(\n",
        "       count(distinct case when session_engaged = 0 then concat(user_pseudo_id,session_id) end),\n",
        "       COUNT(DISTINCT session_id)\n",
        "   ) as bounce_rate,\n",
        "   COUNT(DISTINCT session_id) AS total_sessions,\n",
        "   IFNULL(round(sum(engagement_time_msec)/1000),0) as engagement_time_seconds,\n",
        "from (\n",
        "   select\n",
        "       user_pseudo_id,\n",
        "       event_date,\n",
        "       (select value.int_value from unnest(event_params) where key = 'ga_session_id') as session_id,\n",
        "       IFNULL(max((select value.int_value from unnest(event_params) where key = 'session_engaged')), 0) as session_engaged,\n",
        "       max((select value.int_value from unnest(event_params) where key = 'engagement_time_msec')) as engagement_time_msec\n",
        "   from\n",
        "       `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events*`\n",
        "   WHERE parse_date(\"%Y%m%d\",event_date) >= parse_date(\"%Y-%m-%d\", '2021-01-01')\n",
        "   group by\n",
        "       user_pseudo_id,\n",
        "       event_date,\n",
        "       session_id)\n",
        "   group by user_pseudo_id, event_date),\n",
        "\n",
        "returning_customers as (\n",
        "SELECT user_pseudo_id, event_date, MAX(unique_purchase) as unique_purchase\n",
        "   FROM (\n",
        "       SELECT\n",
        "           user_pseudo_id,\n",
        "           event_date,\n",
        "           RANK() OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp ASC)\n",
        "               AS unique_purchase\n",
        "       FROM\n",
        "           `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events*` AS GA\n",
        "       WHERE event_name = 'purchase'\n",
        "       AND parse_date(\"%Y%m%d\",event_date) >= parse_date(\"%Y-%m-%d\", '2021-01-01')\n",
        "       GROUP BY user_pseudo_id, event_date, event_timestamp\n",
        "   )\n",
        "   WHERE unique_purchase >= 2\n",
        "   GROUP BY user_pseudo_id, event_date\n",
        "),\n",
        "\n",
        "non_returning_customers as (\n",
        "SELECT\n",
        "       user_pseudo_id,\n",
        "       event_date,\n",
        "   FROM `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events*` AS GA\n",
        "   WHERE user_pseudo_id NOT IN (SELECT user_pseudo_id FROM returning_customers)\n",
        "   AND parse_date(\"%Y%m%d\",event_date) >= parse_date(\"%Y-%m-%d\", '2021-01-01')\n",
        "   GROUP BY user_pseudo_id, event_date\n",
        "),\n",
        "\n",
        "combined as (\n",
        " SELECT user_pseudo_id, event_date, unique_purchase\n",
        "   FROM returning_customers\n",
        "   UNION ALL\n",
        "   SELECT user_pseudo_id, event_date, -1\n",
        "   FROM non_returning_customers\n",
        "   GROUP BY user_pseudo_id, event_date\n",
        "),\n",
        "\n",
        "repeated_purchase as (\n",
        " SELECT\n",
        "   user_pseudo_id,\n",
        "   event_date,\n",
        "   CASE\n",
        "       WHEN unique_purchase >= 0\n",
        "       THEN unique_purchase ELSE 0 END AS has_repeated_purchase\n",
        " FROM\n",
        "   combined\n",
        "),\n",
        "\n",
        "events_sequence AS (\n",
        "   SELECT\n",
        "     ROW_NUMBER() OVER () AS rownumber,\n",
        "     ROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY event_date) AS rownumber_by_user,\n",
        "     user_pseudo_id,\n",
        "     event_date\n",
        "   FROM (\n",
        "     SELECT DISTINCT\n",
        "           user_pseudo_id,\n",
        "           event_date,\n",
        "       FROM\n",
        "           `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events*` AS GA\n",
        "       WHERE\n",
        "       parse_date(\"%Y%m%d\",event_date) >= parse_date(\"%Y-%m-%d\", '2021-01-01')\n",
        "       GROUP BY user_pseudo_id, event_date\n",
        "   )\n",
        "   ORDER BY user_pseudo_id, event_date\n",
        "),\n",
        "\n",
        "grouped_events_sequence AS (\n",
        " SELECT user_pseudo_id,\n",
        "        event_date,\n",
        "        DENSE_RANK() OVER (ORDER BY rownumber) - DENSE_RANK() OVER (PARTITION BY user_pseudo_id ORDER BY rownumber) AS car_group,\n",
        "        rownumber_by_user\n",
        " FROM events_sequence\n",
        "),\n",
        "\n",
        "user_events_counted AS (\n",
        "SELECT DISTINCT user_pseudo_id,\n",
        "      count_of_consecutive_days,\n",
        "      MAX(count_of_days) as count_of_days\n",
        "FROM\n",
        "(SELECT user_pseudo_id,\n",
        "       COUNT(1) AS count_of_consecutive_days,\n",
        "       MAX(rownumber_by_user) AS count_of_days\n",
        "FROM grouped_events_sequence\n",
        "GROUP BY user_pseudo_id, car_group\n",
        "HAVING COUNT(1) >= 1)\n",
        "GROUP BY user_pseudo_id, count_of_consecutive_days\n",
        "),\n",
        "\n",
        "pages as (\n",
        "select\n",
        "   user_pseudo_id,\n",
        "   (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') as session_id,\n",
        "   event_timestamp,\n",
        "   event_date,\n",
        "   event_name,\n",
        "   (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') as page,\n",
        "   lag((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'), 1) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp asc) as previous_page,\n",
        "   case when split(split((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as pagepath_level_1,\n",
        "   case when split(split(lag((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'), 1) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp asc),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(lag((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'), 1) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp asc),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as previous_page_path_level_1,\n",
        "   (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_title') as page_title,\n",
        "   case when (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'entrances') = 1 then (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') end as landing_page,\n",
        "   case when split(split((case when (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'entrances') = 1 then (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') END),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split((case when (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'entrances') = 1 then (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') END),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as landing_pagepath_level_1,\n",
        "   case when (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'entrances') = 1 then lead((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'), 1) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp asc) else null end as second_page,\n",
        "   case when split(split((case when (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'entrances') = 1 then lead((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'), 1) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp asc) else null end),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split((case when (select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'entrances') = 1 then lead((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location'), 1) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp asc) else null end),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as second_pagepath_level_1,\n",
        "   case when (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') = first_value((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location')) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp desc) then ( select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') else null end as exit_page,\n",
        "   case when split(split((case when (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') = first_value((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location')) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp desc) then ( select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') else null end),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split((case when (select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') = first_value((select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location')) over (partition by user_pseudo_id,(select value.int_value from unnest(event_params) where event_name = 'page_view' and key = 'ga_session_id') order by event_timestamp desc) then ( select value.string_value from unnest(event_params) where event_name = 'page_view' and key = 'page_location') else null end),'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as exit_pagepath_level_1,\n",
        "from\n",
        "   -- change this to your google analytics 4 export location in bigquery\n",
        "   `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events*`\n",
        "where\n",
        "   event_name = 'page_view'\n",
        "   AND parse_date(\"%Y%m%d\",event_date) >= parse_date(\"%Y-%m-%d\", '2021-01-01')),\n",
        "\n",
        "pages_tracking as (\n",
        "select\n",
        "   user_pseudo_id,\n",
        "   event_date,\n",
        "   -- page (dimension | a page on the website specified by path and/or query parameters)\n",
        "   page,\n",
        "   -- page path level 1 (dimension | this dimension rolls up all the page paths in the first hierarchical level)\n",
        "   MAX(pagepath_level_1) as pagepath_level_1,\n",
        "   -- previous page path (dimension | a page visited before another page on the same property)\n",
        "   MAX(previous_page) as previous_page,\n",
        "   MAX(previous_page_path_level_1) as previous_page_path_level_1,\n",
        "   -- landing page (dimension | the first page in users' sessions)\n",
        "   landing_page,\n",
        "   MAX(landing_pagepath_level_1) as landing_pagepath_level_1,\n",
        "   -- second page (dimension | the second page in users' sessions)\n",
        "   MAX(second_page) as second_page,\n",
        "   MAX(second_pagepath_level_1) as second_pagepath_level_1,\n",
        "   -- exit page (dimension | the last page in users' sessions)\n",
        "   exit_page,\n",
        "   MAX(exit_pagepath_level_1) as exit_pagepath_level_1,\n",
        "   -- entrances (metric | the number of entrances to the property measured as the first pageview in a session)\n",
        "   count(landing_page) as entrances,\n",
        "   -- pageviews (metric | the total number of pageviews for the property)\n",
        "   count(page) as pageviews,\n",
        "   -- unique pageviews (metric | the number of sessions during which the specified page was viewed at least once, a unique pageview is counted for each page url + page title combination)\n",
        "   count(distinct concat(page,page_title,session_id)) as unique_pageviews,\n",
        "   -- pages / session (metric | the average number of pages viewed during a session, including repeated views of a single page)\n",
        "   count(page) / count(distinct session_id) as pages_per_session,\n",
        "   -- exits (metric | the number of exits from the property)\n",
        "   count(exit_page) as exits,\n",
        "   -- exit % (metric | the percentage of exits from the property that occurred out of the total pageviews)\n",
        "   count(exit_page) / count(page) as exit_rate\n",
        "from\n",
        "   pages\n",
        "group by\n",
        "   user_pseudo_id,\n",
        "   event_date,\n",
        "   page,\n",
        "   page_title,\n",
        "   landing_page,\n",
        "   exit_page\n",
        "),\"\"\"\n"
      ],
      "metadata": {
        "id": "VhJ3tzXphmCq"
      },
      "id": "VhJ3tzXphmCq",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Final  Features (Grouped for user):\n",
        "\n",
        "* Date:  Date specific features -> year,month_of_the_year,week_of_the_year,day_of_the_month,day_of_week,hour.\n",
        "\n",
        "* Count of user event footprints -> count_of_days, count_of_consecutive_days, count_total_events, count_of_sessions, count_view_item, count_add_to_cart_item, count_select_item, count_begin_checkout_item\n",
        "\n",
        "* If the user is visiting for the first time -> is_first_visit\n",
        "\n",
        "* Purchase and Promotion elated -> has_promotionhas_added_payment_infohas_added_shipping_info\n",
        "\n",
        "* Engagement and Bounce numbers based on feature base tables: engagement_rate, bounce_rate, bounces, engagement_time_seconds, total_sessions\n",
        "\n",
        "* Page Trackers based on different most visited pages; pagepath_level_1, previous_page_path_level_1, landing_pagepath_level_1, second_pagepath_level_1\n",
        "\n",
        "* Page view specific numbers: entrances, pageviews, unique_pageviews, pages_per_session, exits, exit_rate, new_or_returning_visitor\n",
        "\n",
        "* The campaign that is used most times and various traffic source: campaign, traffic_medium, traffic_source\n",
        "\n",
        "* The total session engaged; engaged_session_event\n",
        "\n",
        "* GA4 internal model predicted LTV value, which is our class or predictor data; ltv_revenue\n",
        "\n",
        "* The category that is visited most and average item quantity viewed and purchased; category, avg_item_quantity\n",
        "\n",
        "* Device specific information for a user:mobile_brand_name, operating_system, operating_system_version, browser, browser_version\n",
        "\n",
        "* User demographic: continent, sub_continent, country, region, city\n"
      ],
      "metadata": {
        "id": "0iJyiKBQh18Q"
      },
      "id": "0iJyiKBQh18Q"
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_feature_query = \"\"\"master_ga4_erp as (\n",
        "SELECT\n",
        "A.user_pseudo_id,\n",
        "MAX(parse_date(\"%Y%m%d\",A.event_date)) as event_date,\n",
        "MAX(\n",
        " CASE\n",
        " WHEN ecommerce.purchase_revenue > 0\n",
        " THEN 1\n",
        " ELSE 0\n",
        "END) AS has_purchased,\n",
        "MAX(Repeated_Purchased.has_repeated_purchase) as had_purchased_before,\n",
        "MAX(CAST(format_date('%Y',parse_date(\"%Y%m%d\",A.event_date)) as INT64)) as year,\n",
        "MAX(CAST(format_date('%m',parse_date(\"%Y%m%d\",A.event_date)) as INT64)) as month_of_the_year,\n",
        "MAX(CAST(format_date('%U',parse_date(\"%Y%m%d\",A.event_date)) as INT64)) as week_of_the_year,\n",
        "MAX(CAST(format_date('%d',parse_date(\"%Y%m%d\",A.event_date)) as INT64)) as day_of_the_month,\n",
        "MAX(CAST(format_date('%w',parse_date(\"%Y%m%d\",A.event_date)) as INT64)) as day_of_week,\n",
        "MAX(CAST(format(\"%02d\",extract(hour from timestamp_micros(A.event_timestamp))) as INT64)) as hour,\n",
        "MAX(User_Events_Counted.count_of_days) as count_of_days,\n",
        "MAX(User_Events_Counted.count_of_consecutive_days) as count_of_consecutive_days,\n",
        "COUNT(DISTINCT A.event_timestamp) as count_total_events,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)purchase') THEN 1 ELSE 0 END) as count_item_purchases,\n",
        "SUM(CASE WHEN (REGEXP_CONTAINS(event_name, '(?i)session_start') AND ep.key = 'ga_session_number') THEN  ep.value.int_value ELSE 0 END) as count_of_sessions,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)view_item') THEN 1 ELSE 0 END) as count_view_item,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)add_to_cart') THEN 1 ELSE 0 END) as count_add_to_cart_item,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)select_item') THEN 1 ELSE 0 END) as count_select_item,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)begin_checkout') THEN 1 ELSE 0 END) as count_begin_checkout_item,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)first_visit') THEN 1 ELSE 0 END) as is_first_visit,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)select_promotion') THEN 1 ELSE 0 END) as has_promotion,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)add_payment_info') THEN 1 ELSE 0 END) as has_added_payment_info,\n",
        "SUM(CASE WHEN REGEXP_CONTAINS(event_name, '(?i)add_shipping_info') THEN 1 ELSE 0 END) as has_added_shipping_info,\n",
        "IFNULL(MAX(Engagement.engagement_rate), 0) AS engagement_rate,\n",
        "IFNULL(MAX(Engagement.bounce_rate), 0) AS bounce_rate,\n",
        "IFNULL(MAX(Engagement.bounces), 0) AS bounces,\n",
        "IFNULL(MAX(Engagement.engagement_time_seconds), 0) AS engagement_time_seconds,\n",
        "IFNULL(MAX(Engagement.total_sessions), 0) AS total_sessions,\n",
        "MAX(Pages_Tracking.page) as page,\n",
        "MAX(Pages_Tracking.pagepath_level_1) as pagepath_level_1,\n",
        "MAX(Pages_Tracking.previous_page) as previous_page,\n",
        "MAX(Pages_Tracking.previous_page_path_level_1) as previous_page_path_level_1,\n",
        "MAX(Pages_Tracking.landing_page) as landing_page,\n",
        "MAX(Pages_Tracking.landing_pagepath_level_1) as landing_pagepath_level_1,\n",
        "MAX(Pages_Tracking.second_page) as second_page,\n",
        "MAX(Pages_Tracking.second_pagepath_level_1) as second_pagepath_level_1,\n",
        "MAX(Pages_Tracking.exit_page) exit_page,\n",
        "MAX(Pages_Tracking.exit_pagepath_level_1) as exit_pagepath_level_1,\n",
        "MAX(Pages_Tracking.entrances) as entrances,\n",
        "MAX(Pages_Tracking.pageviews) as pageviews,\n",
        "MAX(Pages_Tracking.unique_pageviews) as unique_pageviews,\n",
        "MAX(Pages_Tracking.pages_per_session) as pages_per_session,\n",
        "MAX(Pages_Tracking.exits) as exits,\n",
        "MAX(Pages_Tracking.exit_rate) as exit_rate,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"tax\" THEN CAST(ep.value.double_value AS STRING)\n",
        "   END)\n",
        "AS tax,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"ga_session_id\" THEN CAST(ep.value.int_value AS STRING)\n",
        "   END)\n",
        "AS ga_session_id,\n",
        "CASE WHEN MAX(CASE ep.key WHEN \"ga_session_number\" THEN ep.value.int_value END) = 1 THEN 'new' ELSE 'return' END\n",
        "AS new_or_returning_visitor,\n",
        "#MAX(CASE ep.key\n",
        "#    WHEN \"engagement_time_msec\" THEN CAST(ep.value.int_value AS STRING)\n",
        "#    END)\n",
        "#AS engagement_time_msec,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"shipping_tier\" THEN CAST(ep.value.string_value AS STRING)\n",
        "   END)\n",
        "AS shipping_tier,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"coupon\" THEN CAST(ep.value.string_value AS STRING)\n",
        "   END)\n",
        "AS coupon,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"promotion_name\" THEN CAST(ep.value.string_value AS STRING)\n",
        "   END)\n",
        "AS promotion_name,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"payment_type\" THEN CAST(ep.value.string_value AS STRING)\n",
        "   END)\n",
        "AS payment_type,\n",
        "MAX(CASE ep.key\n",
        "   WHEN \"campaign\" THEN CAST(ep.value.string_value AS STRING)\n",
        "   END)\n",
        "AS campaign,\n",
        "COUNT(CASE ep.key\n",
        "   WHEN \"engaged_session_event\" THEN CAST(ep.value.int_value AS STRING)\n",
        "   END)\n",
        "AS engaged_session_event,\n",
        "MAX(A.event_value_in_usd) as event_value_in_usd,\n",
        "MAX(timestamp_micros(A.user_first_touch_timestamp)) as user_first_touch_timestamp,\n",
        "MAX(A.user_ltv.revenue) as ltv_revenue,\n",
        "MAX(A.device.category) as category,\n",
        "MAX(A.device.mobile_brand_name) as mobile_brand_name,\n",
        "MAX(A.device.operating_system) as operating_system,\n",
        "MAX(A.device.operating_system_version) as operating_system_version,\n",
        "MAX(A.device.web_info.browser) as browser,\n",
        "MAX(A.device.web_info.browser_version) as browser_version,\n",
        "MAX(A.geo.continent) as continent,\n",
        "MAX(A.geo.sub_continent) as sub_continent,\n",
        "MAX(A.geo.country) as country,\n",
        "MAX(A.geo.region) as region,\n",
        "MAX(A.geo.city) as city,\n",
        "MAX(A.traffic_source.medium) as traffic_medium,\n",
        "MAX(A.traffic_source.source) as traffic_source,\n",
        "CAST(ROUND(AVG(it.quantity)) AS INT64) as avg_item_quantity,\n",
        "FROM (\n",
        " select e.* EXCEPT(event_params), ep\n",
        " FROM `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events*` e , UNNEST(event_params) ep\n",
        ") A, UNNEST(A.items) it\n",
        "LEFT JOIN repeated_purchase as Repeated_Purchased\n",
        "ON A.user_pseudo_id = Repeated_Purchased.user_pseudo_id\n",
        "LEFT JOIN engagement AS Engagement\n",
        "ON A.user_pseudo_id = Engagement.user_pseudo_id AND A.event_date = Engagement.event_date\n",
        "LEFT JOIN user_events_counted as User_Events_Counted\n",
        "ON A.user_pseudo_id = User_Events_Counted.user_pseudo_id\n",
        "LEFT JOIN pages_tracking AS Pages_Tracking\n",
        "ON A.user_pseudo_id = Pages_Tracking.user_pseudo_id AND A.event_date = Pages_Tracking.event_date\n",
        "WHERE\n",
        "ep.key IN ('tax', 'ga_session_id', 'ga_session_number',\n",
        "               'engagement_time_msec', 'shipping_tier',\n",
        "               'coupon', 'promotion_name', 'payment_type',\n",
        "               'page_location', 'campaign', 'engaged_session_event')\n",
        "AND parse_date(\"%Y%m%d\",A.event_date) >= parse_date(\"%Y-%m-%d\", '2021-01-01')\n",
        "GROUP BY user_pseudo_id, A.event_date)\n",
        "\n",
        "SELECT\n",
        "*\n",
        "EXCEPT(page, previous_page, landing_page, second_page,\n",
        "        exit_page, exit_pagepath_level_1, ga_session_id,\n",
        "        event_value_in_usd, user_first_touch_timestamp, count_item_purchases,\n",
        "        tax, shipping_tier, coupon, promotion_name, payment_type)\n",
        "        #store_code, store_name, transaction_channel,\n",
        "        #engagement_time_msec\n",
        "        #item_category5, google_product_category_path, product_gtin)\n",
        "FROM master_ga4_erp\n",
        "\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "xbFXxKx3h56y"
      },
      "id": "xbFXxKx3h56y",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Combining both the queries, to execute"
      ],
      "metadata": {
        "id": "b137-Ob6k-nD"
      },
      "id": "b137-Ob6k-nD"
    },
    {
      "cell_type": "code",
      "source": [
        "final_feature_table= f\"\"\"\n",
        "{base_feature_tabel}{grouped_feature_query}\n",
        "\"\"\"\n",
        "# print(final_feature_table)\n",
        "query_job = client.query(final_feature_table)"
      ],
      "metadata": {
        "id": "e5Gu17Mrtp0N"
      },
      "id": "e5Gu17Mrtp0N",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The above feature creation takes approx 5 minutes. The following code will throw an error unless the table has been built. Wait and retry. If you still get an error after a while, your query might have failed to execute. Try running the query in the BQ console."
      ],
      "metadata": {
        "id": "hrJCerh-ay8C"
      },
      "id": "hrJCerh-ay8C"
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  `{DATASET_NAME}.{feature_table}`\n",
        "LIMIT\n",
        "5\n",
        "\"\"\"\n",
        "\n",
        "query_job = client.query(query)\n",
        "result_df = query_job.to_dataframe()\n",
        "result_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "EsYLSb48KIHP",
        "outputId": "ddde5df1-dd2a-48af-b200-0bbcc00633be"
      },
      "id": "EsYLSb48KIHP",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          user_pseudo_id  event_date  has_purchased  had_purchased_before  \\\n",
              "0     1188134.8498680538  2021-01-01              0                     0   \n",
              "1    38359877.5815012009  2021-01-01              0                     0   \n",
              "2  1566834642.5850724108  2021-01-01              0                     0   \n",
              "3     5831980.2827657871  2021-01-01              0                     0   \n",
              "4    28134106.1591086954  2021-01-01              0                     0   \n",
              "\n",
              "   year  month_of_the_year  week_of_the_year  day_of_the_month  day_of_week  \\\n",
              "0  2021                  1                 0                 1            5   \n",
              "1  2021                  1                 0                 1            5   \n",
              "2  2021                  1                 0                 1            5   \n",
              "3  2021                  1                 0                 1            5   \n",
              "4  2021                  1                 0                 1            5   \n",
              "\n",
              "   hour  count_of_days  count_of_consecutive_days  count_total_events  \\\n",
              "0    15              1                          1                  18   \n",
              "1    13              1                          1                  22   \n",
              "2    23              1                          1                   2   \n",
              "3     2              1                          1                   4   \n",
              "4    13              3                          1                  22   \n",
              "\n",
              "   count_of_sessions  count_view_item  count_add_to_cart_item  \\\n",
              "0                  0             7800                    7700   \n",
              "1                  0             3960                    4020   \n",
              "2                  0             1440                       0   \n",
              "3                  0              320                       0   \n",
              "4                  0            77688                   32760   \n",
              "\n",
              "   count_select_item  count_begin_checkout_item  is_first_visit  \\\n",
              "0                  0                        900               0   \n",
              "1                  0                          0               0   \n",
              "2                  0                          0               0   \n",
              "3                384                          0               0   \n",
              "4              10296                       2808               0   \n",
              "\n",
              "   has_promotion  has_added_payment_info  has_added_shipping_info  \\\n",
              "0            125                       0                        0   \n",
              "1              0                       0                        0   \n",
              "2              0                       0                        0   \n",
              "3             80                       0                        0   \n",
              "4              0                       0                        0   \n",
              "\n",
              "   engagement_rate  bounce_rate  bounces  engagement_time_seconds  \\\n",
              "0              1.0          0.0        0                    646.0   \n",
              "1              1.0          0.0        0                    123.0   \n",
              "2              1.0          0.0        0                     50.0   \n",
              "3              1.0          0.0        0                    125.0   \n",
              "4              1.0          0.0        0                     85.0   \n",
              "\n",
              "   total_sessions pagepath_level_1 previous_page_path_level_1  \\\n",
              "0               1   /yourinfo.html             /yourinfo.html   \n",
              "1               1     /basket.html               /basket.html   \n",
              "2               1     /signin.html               /signin.html   \n",
              "3               1      /store.html                /store.html   \n",
              "4               2   /yourinfo.html             /yourinfo.html   \n",
              "\n",
              "  landing_pagepath_level_1 second_pagepath_level_1  entrances  pageviews  \\\n",
              "0                     None                    None          1          6   \n",
              "1         /Google+Redesign        /Google+Redesign          1          3   \n",
              "2         /Google+Redesign        /Google+Redesign          1          6   \n",
              "3                     None                    None          1          2   \n",
              "4                     None                    None          1          3   \n",
              "\n",
              "   unique_pageviews  pages_per_session  exits  exit_rate  \\\n",
              "0                 1                6.0      3        1.0   \n",
              "1                 1                3.0      3        1.0   \n",
              "2                 1                6.0      2        1.0   \n",
              "3                 1                2.0      1        1.0   \n",
              "4                 1                3.0      1        1.0   \n",
              "\n",
              "  new_or_returning_visitor    campaign  engaged_session_event  ltv_revenue  \\\n",
              "0                      new     <Other>                   3200          0.0   \n",
              "1                      new  (referral)                   1500          0.0   \n",
              "2                      new  (referral)                    240          0.0   \n",
              "3                      new  (referral)                    160          0.0   \n",
              "4                   return    (direct)                  23010          0.0   \n",
              "\n",
              "  category mobile_brand_name operating_system operating_system_version  \\\n",
              "0   mobile             Apple              Web                  <Other>   \n",
              "1  desktop            Google              Web                       10   \n",
              "2   mobile             Apple              Web                  <Other>   \n",
              "3   mobile            Xiaomi              Web                       10   \n",
              "4  desktop            Google              Web                       10   \n",
              "\n",
              "  browser browser_version continent     sub_continent        country  \\\n",
              "0  Safari            14.0  Americas  Northern America  United States   \n",
              "1  Chrome            86.0  Americas  Northern America  United States   \n",
              "2  Safari            14.0      Asia     Southern Asia          India   \n",
              "3  Chrome            86.0    Europe    Western Europe    Netherlands   \n",
              "4  Chrome            87.0  Americas  Northern America         Canada   \n",
              "\n",
              "          region        city traffic_medium traffic_source  avg_item_quantity  \n",
              "0     New Jersey   (not set)        <Other>        <Other>                  1  \n",
              "1          Maine      Turner        organic         google                  1  \n",
              "2     Chandigarh  Chandigarh        <Other>        <Other>               <NA>  \n",
              "3  South Holland   Rotterdam        <Other>        <Other>               <NA>  \n",
              "4    Nova Scotia     Halifax        organic         google                  1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f69b0748-3e7a-4d02-b70d-9b05c02e5537\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_pseudo_id</th>\n",
              "      <th>event_date</th>\n",
              "      <th>has_purchased</th>\n",
              "      <th>had_purchased_before</th>\n",
              "      <th>year</th>\n",
              "      <th>month_of_the_year</th>\n",
              "      <th>week_of_the_year</th>\n",
              "      <th>day_of_the_month</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>hour</th>\n",
              "      <th>count_of_days</th>\n",
              "      <th>count_of_consecutive_days</th>\n",
              "      <th>count_total_events</th>\n",
              "      <th>count_of_sessions</th>\n",
              "      <th>count_view_item</th>\n",
              "      <th>count_add_to_cart_item</th>\n",
              "      <th>count_select_item</th>\n",
              "      <th>count_begin_checkout_item</th>\n",
              "      <th>is_first_visit</th>\n",
              "      <th>has_promotion</th>\n",
              "      <th>has_added_payment_info</th>\n",
              "      <th>has_added_shipping_info</th>\n",
              "      <th>engagement_rate</th>\n",
              "      <th>bounce_rate</th>\n",
              "      <th>bounces</th>\n",
              "      <th>engagement_time_seconds</th>\n",
              "      <th>total_sessions</th>\n",
              "      <th>pagepath_level_1</th>\n",
              "      <th>previous_page_path_level_1</th>\n",
              "      <th>landing_pagepath_level_1</th>\n",
              "      <th>second_pagepath_level_1</th>\n",
              "      <th>entrances</th>\n",
              "      <th>pageviews</th>\n",
              "      <th>unique_pageviews</th>\n",
              "      <th>pages_per_session</th>\n",
              "      <th>exits</th>\n",
              "      <th>exit_rate</th>\n",
              "      <th>new_or_returning_visitor</th>\n",
              "      <th>campaign</th>\n",
              "      <th>engaged_session_event</th>\n",
              "      <th>ltv_revenue</th>\n",
              "      <th>category</th>\n",
              "      <th>mobile_brand_name</th>\n",
              "      <th>operating_system</th>\n",
              "      <th>operating_system_version</th>\n",
              "      <th>browser</th>\n",
              "      <th>browser_version</th>\n",
              "      <th>continent</th>\n",
              "      <th>sub_continent</th>\n",
              "      <th>country</th>\n",
              "      <th>region</th>\n",
              "      <th>city</th>\n",
              "      <th>traffic_medium</th>\n",
              "      <th>traffic_source</th>\n",
              "      <th>avg_item_quantity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1188134.8498680538</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>7800</td>\n",
              "      <td>7700</td>\n",
              "      <td>0</td>\n",
              "      <td>900</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>646.0</td>\n",
              "      <td>1</td>\n",
              "      <td>/yourinfo.html</td>\n",
              "      <td>/yourinfo.html</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>new</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>3200</td>\n",
              "      <td>0.0</td>\n",
              "      <td>mobile</td>\n",
              "      <td>Apple</td>\n",
              "      <td>Web</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>Safari</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Northern America</td>\n",
              "      <td>United States</td>\n",
              "      <td>New Jersey</td>\n",
              "      <td>(not set)</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>38359877.5815012009</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>3960</td>\n",
              "      <td>4020</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>123.0</td>\n",
              "      <td>1</td>\n",
              "      <td>/basket.html</td>\n",
              "      <td>/basket.html</td>\n",
              "      <td>/Google+Redesign</td>\n",
              "      <td>/Google+Redesign</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>new</td>\n",
              "      <td>(referral)</td>\n",
              "      <td>1500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>desktop</td>\n",
              "      <td>Google</td>\n",
              "      <td>Web</td>\n",
              "      <td>10</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>86.0</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Northern America</td>\n",
              "      <td>United States</td>\n",
              "      <td>Maine</td>\n",
              "      <td>Turner</td>\n",
              "      <td>organic</td>\n",
              "      <td>google</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1566834642.5850724108</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1440</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>1</td>\n",
              "      <td>/signin.html</td>\n",
              "      <td>/signin.html</td>\n",
              "      <td>/Google+Redesign</td>\n",
              "      <td>/Google+Redesign</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>new</td>\n",
              "      <td>(referral)</td>\n",
              "      <td>240</td>\n",
              "      <td>0.0</td>\n",
              "      <td>mobile</td>\n",
              "      <td>Apple</td>\n",
              "      <td>Web</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>Safari</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southern Asia</td>\n",
              "      <td>India</td>\n",
              "      <td>Chandigarh</td>\n",
              "      <td>Chandigarh</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5831980.2827657871</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>320</td>\n",
              "      <td>0</td>\n",
              "      <td>384</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>125.0</td>\n",
              "      <td>1</td>\n",
              "      <td>/store.html</td>\n",
              "      <td>/store.html</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>new</td>\n",
              "      <td>(referral)</td>\n",
              "      <td>160</td>\n",
              "      <td>0.0</td>\n",
              "      <td>mobile</td>\n",
              "      <td>Xiaomi</td>\n",
              "      <td>Web</td>\n",
              "      <td>10</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>86.0</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Western Europe</td>\n",
              "      <td>Netherlands</td>\n",
              "      <td>South Holland</td>\n",
              "      <td>Rotterdam</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28134106.1591086954</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>77688</td>\n",
              "      <td>32760</td>\n",
              "      <td>10296</td>\n",
              "      <td>2808</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>2</td>\n",
              "      <td>/yourinfo.html</td>\n",
              "      <td>/yourinfo.html</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>return</td>\n",
              "      <td>(direct)</td>\n",
              "      <td>23010</td>\n",
              "      <td>0.0</td>\n",
              "      <td>desktop</td>\n",
              "      <td>Google</td>\n",
              "      <td>Web</td>\n",
              "      <td>10</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>87.0</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Northern America</td>\n",
              "      <td>Canada</td>\n",
              "      <td>Nova Scotia</td>\n",
              "      <td>Halifax</td>\n",
              "      <td>organic</td>\n",
              "      <td>google</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f69b0748-3e7a-4d02-b70d-9b05c02e5537')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f69b0748-3e7a-4d02-b70d-9b05c02e5537 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f69b0748-3e7a-4d02-b70d-9b05c02e5537');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## BQML Modeling"
      ],
      "metadata": {
        "id": "I4i8g9LDc5RA"
      },
      "id": "I4i8g9LDc5RA"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Once we have all the features, we can run the BQML model. We don't have to specify specific parameters and can leverage auto hyperparameter tunning. Just as we discussed, our target variable is \"ltv_revenue\". We want the model to understand the relationship between all the user-specific features and \"ltv_revenue\", so we can use this model to predict future LTV values for customers. The model can also help us predict for users where the default LTV (given in the dashboard) failed to generate any LTV.\n",
        "\n",
        "We can also leverage global explaination available as part of BQML by using enable_global_explain=TRUE. This can provide us with feature rankings and their weights. It will also help us identify why each prediction is being made and which columns have been responsible for the predicted value."
      ],
      "metadata": {
        "id": "-vXqjW9TvPTj"
      },
      "id": "-vXqjW9TvPTj"
    },
    {
      "cell_type": "code",
      "source": [
        "model_name = \"customer_ltv_model\"\n",
        "trails = 8\n",
        "\n",
        "linear_regression_query = f\"\"\"\n",
        "CREATE OR REPLACE MODEL\n",
        "  `{DATASET_NAME}.{model_name}` OPTIONS (model_type='linear_reg',\n",
        "    input_label_cols=['ltv_revenue'],num_trials={trails},\n",
        "   max_parallel_trials=4,\n",
        "   enable_global_explain=TRUE) AS\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  `{PROJECT_ID}.{DATASET_NAME}.{feature_table}`\n",
        "WHERE\n",
        "  ltv_revenue IS NOT NULL\n",
        "\"\"\"\n",
        "# print(linear_regression_query)\n",
        "query_job = client.query(linear_regression_query)"
      ],
      "metadata": {
        "id": "ZDybb73d3Ht5"
      },
      "id": "ZDybb73d3Ht5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_name = \"customer_ltv_model\"\n",
        "ml_evaluate_query = f\"\"\"\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  ML.EVALUATE(MODEL `{DATASET_NAME}.{model_name}`,\n",
        "    (\n",
        "    SELECT\n",
        "      *\n",
        "    FROM\n",
        "      `{PROJECT_ID}.{DATASET_NAME}.{feature_table}`\n",
        "    WHERE\n",
        "      ltv_revenue IS NOT NULL))\n",
        "\"\"\"\n",
        "query_job = client.query(ml_evaluate_query)\n",
        "ml_info_df = query_job.to_dataframe()\n",
        "ml_info_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "GeoJwWqHxhQt",
        "outputId": "00ccdd98-8104-45be-81e5-474b6f6c60f7"
      },
      "id": "GeoJwWqHxhQt",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   trial_id  mean_absolute_error  mean_squared_error  mean_squared_log_error  \\\n",
              "0         1             4.207757          174.093048                2.064566   \n",
              "\n",
              "   median_absolute_error  r2_score  explained_variance  \n",
              "0                2.59315  0.713292            0.722243  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e841dae-b2bb-487e-b57d-945acadd6932\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trial_id</th>\n",
              "      <th>mean_absolute_error</th>\n",
              "      <th>mean_squared_error</th>\n",
              "      <th>mean_squared_log_error</th>\n",
              "      <th>median_absolute_error</th>\n",
              "      <th>r2_score</th>\n",
              "      <th>explained_variance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>4.207757</td>\n",
              "      <td>174.093048</td>\n",
              "      <td>2.064566</td>\n",
              "      <td>2.59315</td>\n",
              "      <td>0.713292</td>\n",
              "      <td>0.722243</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e841dae-b2bb-487e-b57d-945acadd6932')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6e841dae-b2bb-487e-b57d-945acadd6932 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6e841dae-b2bb-487e-b57d-945acadd6932');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After a while, we can check the final results of tunning. We can observe that we already have a model with 71% r2 and 72% variance explained. These are not great numbers, but they are good to start. We only have three months of user data to manage our expectations from an accuracy perspective. In the future, when more data flow, we can expect it to explain more than 90% variance, such that we have reliable LTV."
      ],
      "metadata": {
        "id": "dHULDTnhwvJD"
      },
      "id": "dHULDTnhwvJD"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since we have asked the BQML model to run different trials, we can check the parameters for each trial to decide on any other model if we want to. However, by default, it has picked the first model, where is_optimal = True."
      ],
      "metadata": {
        "id": "e0gPQNmhwwel"
      },
      "id": "e0gPQNmhwwel"
    },
    {
      "cell_type": "code",
      "source": [
        "ml_trail_info_query = f\"\"\"\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  ML.TRIAL_INFO(MODEL `{DATASET_NAME}.{model_name}`)\n",
        "\"\"\"\n",
        "query_job = client.query(ml_trail_info_query)\n",
        "ml_trail_df = query_job.to_dataframe()\n",
        "ml_trail_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "tJ8HzP6Py142",
        "outputId": "4b594055-108c-446b-f7e6-57f8cd93373e"
      },
      "id": "tJ8HzP6Py142",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   trial_id                                    hyperparameters  \\\n",
              "0         1                 {'l1_reg': 1e-14, 'l2_reg': 1e-14}   \n",
              "1         2  {'l1_reg': 1.985506772083825e-11, 'l2_reg': 1....   \n",
              "2         3  {'l1_reg': 7.6143642961342e-08, 'l2_reg': 7.54...   \n",
              "3         4  {'l1_reg': 1e-14, 'l2_reg': 1.5272112924267377...   \n",
              "4         5  {'l1_reg': 0.001139697734923899, 'l2_reg': 4.7...   \n",
              "5         6  {'l1_reg': 7.525817311890173e-10, 'l2_reg': 1....   \n",
              "6         7  {'l1_reg': 1.1277580329593029e-11, 'l2_reg': 1...   \n",
              "7         8  {'l1_reg': 6.139126328320025e-13, 'l2_reg': 3....   \n",
              "\n",
              "    hparam_tuning_evaluation_metrics  training_loss   eval_loss     status  \\\n",
              "0  {'r2_score': 0.46280480985451333}     171.077340  152.409605  SUCCEEDED   \n",
              "1   {'r2_score': 0.4628048098534886}     171.077340  152.409605  SUCCEEDED   \n",
              "2   {'r2_score': 0.4628048058376373}     171.077343  152.409606  SUCCEEDED   \n",
              "3   {'r2_score': 0.4628048022365018}     171.077346  152.409607  SUCCEEDED   \n",
              "4   {'r2_score': 0.4628009911372597}     171.078275  152.410689  SUCCEEDED   \n",
              "5  {'r2_score': 0.46280480985190453}     171.077340  152.409605  SUCCEEDED   \n",
              "6   {'r2_score': 0.4628048098544747}     171.077340  152.409605  SUCCEEDED   \n",
              "7   {'r2_score': 0.4628048098544947}     171.077340  152.409605  SUCCEEDED   \n",
              "\n",
              "  error_message  is_optimal  \n",
              "0          None        True  \n",
              "1          None       False  \n",
              "2          None       False  \n",
              "3          None       False  \n",
              "4          None       False  \n",
              "5          None       False  \n",
              "6          None       False  \n",
              "7          None       False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d453605-8783-4b7f-8f5e-1241106f1638\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trial_id</th>\n",
              "      <th>hyperparameters</th>\n",
              "      <th>hparam_tuning_evaluation_metrics</th>\n",
              "      <th>training_loss</th>\n",
              "      <th>eval_loss</th>\n",
              "      <th>status</th>\n",
              "      <th>error_message</th>\n",
              "      <th>is_optimal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>{'l1_reg': 1e-14, 'l2_reg': 1e-14}</td>\n",
              "      <td>{'r2_score': 0.46280480985451333}</td>\n",
              "      <td>171.077340</td>\n",
              "      <td>152.409605</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>{'l1_reg': 1.985506772083825e-11, 'l2_reg': 1....</td>\n",
              "      <td>{'r2_score': 0.4628048098534886}</td>\n",
              "      <td>171.077340</td>\n",
              "      <td>152.409605</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>{'l1_reg': 7.6143642961342e-08, 'l2_reg': 7.54...</td>\n",
              "      <td>{'r2_score': 0.4628048058376373}</td>\n",
              "      <td>171.077343</td>\n",
              "      <td>152.409606</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>{'l1_reg': 1e-14, 'l2_reg': 1.5272112924267377...</td>\n",
              "      <td>{'r2_score': 0.4628048022365018}</td>\n",
              "      <td>171.077346</td>\n",
              "      <td>152.409607</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>{'l1_reg': 0.001139697734923899, 'l2_reg': 4.7...</td>\n",
              "      <td>{'r2_score': 0.4628009911372597}</td>\n",
              "      <td>171.078275</td>\n",
              "      <td>152.410689</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>{'l1_reg': 7.525817311890173e-10, 'l2_reg': 1....</td>\n",
              "      <td>{'r2_score': 0.46280480985190453}</td>\n",
              "      <td>171.077340</td>\n",
              "      <td>152.409605</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>{'l1_reg': 1.1277580329593029e-11, 'l2_reg': 1...</td>\n",
              "      <td>{'r2_score': 0.4628048098544747}</td>\n",
              "      <td>171.077340</td>\n",
              "      <td>152.409605</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>{'l1_reg': 6.139126328320025e-13, 'l2_reg': 3....</td>\n",
              "      <td>{'r2_score': 0.4628048098544947}</td>\n",
              "      <td>171.077340</td>\n",
              "      <td>152.409605</td>\n",
              "      <td>SUCCEEDED</td>\n",
              "      <td>None</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d453605-8783-4b7f-8f5e-1241106f1638')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1d453605-8783-4b7f-8f5e-1241106f1638 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1d453605-8783-4b7f-8f5e-1241106f1638');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Batch Prediction"
      ],
      "metadata": {
        "id": "nvoChYnuc_Af"
      },
      "id": "nvoChYnuc_Af"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now that we have the final model, we can use our data to predict the new values for LTV, which we are considering more comprehensive and future values. Do note that we have not broken our data into train and test and our just using the whole feature set as training data. That is not an optimized way to execute. So, we are sending the same features in the model for prediction. The LTV revenue will be considered as the future values for each user.\n",
        "\n",
        "You can also carefully focus on users where the ltv_revenue is zero, but our models have given some positive values. This shows that model thinks that these users have some potential and can be used for more targeted marketing.\n",
        "\n",
        "Some of the same users with zero base values are also given negative values, which can be considered zero - meaning the model also thinks they have no potential revenue in the future."
      ],
      "metadata": {
        "id": "TAO7zsiWyf9g"
      },
      "id": "TAO7zsiWyf9g"
    },
    {
      "cell_type": "code",
      "source": [
        "prediction_data_table_name = \"model_prediction_ltv\"\n",
        "query = f\"\"\"\n",
        "CREATE OR REPLACE TABLE\n",
        "  {DATASET_NAME}.{prediction_data_table_name} AS\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  ML.PREDICT(MODEL `{DATASET_NAME}.{model_name}`,\n",
        "    (\n",
        "    SELECT\n",
        "      *\n",
        "    FROM\n",
        "      `{PROJECT_ID}.{DATASET_NAME}.{feature_table}`\n",
        "    WHERE\n",
        "      ltv_revenue IS NOT NULL\n",
        "    ))\n",
        "\"\"\"\n",
        "# print(query)\n",
        "query_job = client.query(query)"
      ],
      "metadata": {
        "id": "nxjJ9F9RAa6n"
      },
      "id": "nxjJ9F9RAa6n",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  {PROJECT_ID}.{DATASET_NAME}.{prediction_data_table_name}\n",
        "LIMIT 1000\n",
        "\"\"\"\n",
        "# print(query)\n",
        "query_job = client.query(query)\n",
        "predict_data = query_job.to_dataframe()\n",
        "predict_data[predict_data['predicted_ltv_revenue']>=0.0].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "mz8_PxJnOPxy",
        "outputId": "9bb034cc-40eb-4466-a288-d514768c68e3"
      },
      "id": "mz8_PxJnOPxy",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    trial_id  predicted_ltv_revenue         user_pseudo_id  event_date  \\\n",
              "13         1               0.049819    61070408.2537441957  2021-01-01   \n",
              "37         1               0.374900    41290994.4747362392  2021-01-01   \n",
              "44         1               1.108862    23138075.5668454968  2021-01-01   \n",
              "71         1               0.007313     5735192.0744909912  2021-01-01   \n",
              "78         1               0.737367  4942076817.0373385545  2021-01-01   \n",
              "\n",
              "    has_purchased  had_purchased_before  year  month_of_the_year  \\\n",
              "13              0                     0  2021                  1   \n",
              "37              0                     0  2021                  1   \n",
              "44              0                     0  2021                  1   \n",
              "71              0                     0  2021                  1   \n",
              "78              0                     0  2021                  1   \n",
              "\n",
              "    week_of_the_year  day_of_the_month  day_of_week  hour  count_of_days  \\\n",
              "13                 0                 1            5    18              1   \n",
              "37                 0                 1            5    15              1   \n",
              "44                 0                 1            5    23              2   \n",
              "71                 0                 1            5     2              1   \n",
              "78                 0                 1            5     8              1   \n",
              "\n",
              "    count_of_consecutive_days  count_total_events  count_of_sessions  \\\n",
              "13                          1                   1                  0   \n",
              "37                          1                   2                  0   \n",
              "44                          1                   1                  0   \n",
              "71                          1                   1                  0   \n",
              "78                          1                   1                  0   \n",
              "\n",
              "    count_view_item  count_add_to_cart_item  count_select_item  \\\n",
              "13                0                       0                  0   \n",
              "37                0                       0                  0   \n",
              "44                0                       0                  0   \n",
              "71                0                       0                  0   \n",
              "78                0                       0                  0   \n",
              "\n",
              "    count_begin_checkout_item  is_first_visit  has_promotion  \\\n",
              "13                          0               0              0   \n",
              "37                          0               0              0   \n",
              "44                          0               0              0   \n",
              "71                          0               0              0   \n",
              "78                          0               0              0   \n",
              "\n",
              "    has_added_payment_info  has_added_shipping_info  engagement_rate  \\\n",
              "13                       0                        0              1.0   \n",
              "37                       0                        0              1.0   \n",
              "44                       0                        0              1.0   \n",
              "71                       0                        0              1.0   \n",
              "78                       0                        0              1.0   \n",
              "\n",
              "    bounce_rate  bounces  engagement_time_seconds  total_sessions  \\\n",
              "13          0.0        0                      5.0               1   \n",
              "37          0.0        0                      0.0               1   \n",
              "44          0.0        0                     14.0               1   \n",
              "71          0.0        0                      3.0               1   \n",
              "78          0.0        0                      2.0               1   \n",
              "\n",
              "   pagepath_level_1 previous_page_path_level_1 landing_pagepath_level_1  \\\n",
              "13             None                       None                     None   \n",
              "37             None                       None                     None   \n",
              "44             None                       None                     None   \n",
              "71             None                       None                     None   \n",
              "78             None                       None                     None   \n",
              "\n",
              "   second_pagepath_level_1  entrances  pageviews  unique_pageviews  \\\n",
              "13                    None          0          1                 1   \n",
              "37                    None          1          2                 1   \n",
              "44                    None          1          1                 1   \n",
              "71                    None          1          1                 1   \n",
              "78                    None          1          1                 1   \n",
              "\n",
              "    pages_per_session  exits  exit_rate new_or_returning_visitor campaign  \\\n",
              "13                1.0      1        1.0                   return     None   \n",
              "37                2.0      2        1.0                      new     None   \n",
              "44                1.0      0        0.0                      new     None   \n",
              "71                1.0      1        1.0                   return     None   \n",
              "78                1.0      1        1.0                   return     None   \n",
              "\n",
              "    engaged_session_event  ltv_revenue category mobile_brand_name  \\\n",
              "13                      1          0.0  desktop         Microsoft   \n",
              "37                      4          0.0   mobile           <Other>   \n",
              "44                      4          0.0   tablet           Samsung   \n",
              "71                      2          0.0  desktop            Google   \n",
              "78                      2          0.0  desktop            Google   \n",
              "\n",
              "   operating_system operating_system_version browser browser_version  \\\n",
              "13          Windows               Windows 10    Edge            87.0   \n",
              "37              Web                  <Other>  Chrome            86.0   \n",
              "44              Web                  <Other>  Chrome            86.0   \n",
              "71              Web                       10  Chrome            86.0   \n",
              "78              Web                       10  Chrome            86.0   \n",
              "\n",
              "   continent    sub_continent         country             region  \\\n",
              "13    Europe  Southern Europe           Spain          Catalonia   \n",
              "37    Europe  Northern Europe         Finland            Uusimaa   \n",
              "44      Asia   Southeast Asia         Vietnam   Ho Chi Minh City   \n",
              "71    Africa  Northern Africa           Egypt  Cairo Governorate   \n",
              "78    Europe  Northern Europe  United Kingdom            England   \n",
              "\n",
              "                city traffic_medium                   traffic_source  \\\n",
              "13         Barcelona        organic                           google   \n",
              "37          Helsinki       referral                          <Other>   \n",
              "44  Ho Chi Minh City        <Other>                          <Other>   \n",
              "71             Cairo         (none)                         (direct)   \n",
              "78            London       referral  shop.googlemerchandisestore.com   \n",
              "\n",
              "    avg_item_quantity  \n",
              "13               <NA>  \n",
              "37               <NA>  \n",
              "44               <NA>  \n",
              "71               <NA>  \n",
              "78               <NA>  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-992ecac8-52ce-44ca-8ee4-31dcf8c655b1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trial_id</th>\n",
              "      <th>predicted_ltv_revenue</th>\n",
              "      <th>user_pseudo_id</th>\n",
              "      <th>event_date</th>\n",
              "      <th>has_purchased</th>\n",
              "      <th>had_purchased_before</th>\n",
              "      <th>year</th>\n",
              "      <th>month_of_the_year</th>\n",
              "      <th>week_of_the_year</th>\n",
              "      <th>day_of_the_month</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>hour</th>\n",
              "      <th>count_of_days</th>\n",
              "      <th>count_of_consecutive_days</th>\n",
              "      <th>count_total_events</th>\n",
              "      <th>count_of_sessions</th>\n",
              "      <th>count_view_item</th>\n",
              "      <th>count_add_to_cart_item</th>\n",
              "      <th>count_select_item</th>\n",
              "      <th>count_begin_checkout_item</th>\n",
              "      <th>is_first_visit</th>\n",
              "      <th>has_promotion</th>\n",
              "      <th>has_added_payment_info</th>\n",
              "      <th>has_added_shipping_info</th>\n",
              "      <th>engagement_rate</th>\n",
              "      <th>bounce_rate</th>\n",
              "      <th>bounces</th>\n",
              "      <th>engagement_time_seconds</th>\n",
              "      <th>total_sessions</th>\n",
              "      <th>pagepath_level_1</th>\n",
              "      <th>previous_page_path_level_1</th>\n",
              "      <th>landing_pagepath_level_1</th>\n",
              "      <th>second_pagepath_level_1</th>\n",
              "      <th>entrances</th>\n",
              "      <th>pageviews</th>\n",
              "      <th>unique_pageviews</th>\n",
              "      <th>pages_per_session</th>\n",
              "      <th>exits</th>\n",
              "      <th>exit_rate</th>\n",
              "      <th>new_or_returning_visitor</th>\n",
              "      <th>campaign</th>\n",
              "      <th>engaged_session_event</th>\n",
              "      <th>ltv_revenue</th>\n",
              "      <th>category</th>\n",
              "      <th>mobile_brand_name</th>\n",
              "      <th>operating_system</th>\n",
              "      <th>operating_system_version</th>\n",
              "      <th>browser</th>\n",
              "      <th>browser_version</th>\n",
              "      <th>continent</th>\n",
              "      <th>sub_continent</th>\n",
              "      <th>country</th>\n",
              "      <th>region</th>\n",
              "      <th>city</th>\n",
              "      <th>traffic_medium</th>\n",
              "      <th>traffic_source</th>\n",
              "      <th>avg_item_quantity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1</td>\n",
              "      <td>0.049819</td>\n",
              "      <td>61070408.2537441957</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>return</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>desktop</td>\n",
              "      <td>Microsoft</td>\n",
              "      <td>Windows</td>\n",
              "      <td>Windows 10</td>\n",
              "      <td>Edge</td>\n",
              "      <td>87.0</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Catalonia</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>organic</td>\n",
              "      <td>google</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1</td>\n",
              "      <td>0.374900</td>\n",
              "      <td>41290994.4747362392</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>new</td>\n",
              "      <td>None</td>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>mobile</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>Web</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>86.0</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Northern Europe</td>\n",
              "      <td>Finland</td>\n",
              "      <td>Uusimaa</td>\n",
              "      <td>Helsinki</td>\n",
              "      <td>referral</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>1</td>\n",
              "      <td>1.108862</td>\n",
              "      <td>23138075.5668454968</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>23</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>new</td>\n",
              "      <td>None</td>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>tablet</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>Web</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>86.0</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southeast Asia</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>Ho Chi Minh City</td>\n",
              "      <td>Ho Chi Minh City</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;Other&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>1</td>\n",
              "      <td>0.007313</td>\n",
              "      <td>5735192.0744909912</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>return</td>\n",
              "      <td>None</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>desktop</td>\n",
              "      <td>Google</td>\n",
              "      <td>Web</td>\n",
              "      <td>10</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>86.0</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Northern Africa</td>\n",
              "      <td>Egypt</td>\n",
              "      <td>Cairo Governorate</td>\n",
              "      <td>Cairo</td>\n",
              "      <td>(none)</td>\n",
              "      <td>(direct)</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>1</td>\n",
              "      <td>0.737367</td>\n",
              "      <td>4942076817.0373385545</td>\n",
              "      <td>2021-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>return</td>\n",
              "      <td>None</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>desktop</td>\n",
              "      <td>Google</td>\n",
              "      <td>Web</td>\n",
              "      <td>10</td>\n",
              "      <td>Chrome</td>\n",
              "      <td>86.0</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Northern Europe</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>England</td>\n",
              "      <td>London</td>\n",
              "      <td>referral</td>\n",
              "      <td>shop.googlemerchandisestore.com</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-992ecac8-52ce-44ca-8ee4-31dcf8c655b1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-992ecac8-52ce-44ca-8ee4-31dcf8c655b1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-992ecac8-52ce-44ca-8ee4-31dcf8c655b1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predict_data[predict_data['predicted_ltv_revenue']>=0.0][['user_pseudo_id','predicted_ltv_revenue','ltv_revenue']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "zysINzjezewg",
        "outputId": "aa5386fe-e2cc-4760-b265-0d85e115557a"
      },
      "id": "zysINzjezewg",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            user_pseudo_id  predicted_ltv_revenue  ltv_revenue\n",
              "13     61070408.2537441957               0.049819          0.0\n",
              "37     41290994.4747362392               0.374900          0.0\n",
              "44     23138075.5668454968               1.108862          0.0\n",
              "71      5735192.0744909912               0.007313          0.0\n",
              "78   4942076817.0373385545               0.737367          0.0\n",
              "..                     ...                    ...          ...\n",
              "972     1309149.1848587742               1.062113          0.0\n",
              "974    44830172.5772867605               0.693904          0.0\n",
              "975    75301092.9480913991               3.561396          0.0\n",
              "997    56512094.7533578588               0.474618          0.0\n",
              "998    22165858.8832652283               4.059610          0.0\n",
              "\n",
              "[79 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f56d7db-5a1b-4b6c-b551-a4c6ed8f183f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_pseudo_id</th>\n",
              "      <th>predicted_ltv_revenue</th>\n",
              "      <th>ltv_revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>61070408.2537441957</td>\n",
              "      <td>0.049819</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>41290994.4747362392</td>\n",
              "      <td>0.374900</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>23138075.5668454968</td>\n",
              "      <td>1.108862</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>5735192.0744909912</td>\n",
              "      <td>0.007313</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>4942076817.0373385545</td>\n",
              "      <td>0.737367</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>972</th>\n",
              "      <td>1309149.1848587742</td>\n",
              "      <td>1.062113</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>974</th>\n",
              "      <td>44830172.5772867605</td>\n",
              "      <td>0.693904</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>975</th>\n",
              "      <td>75301092.9480913991</td>\n",
              "      <td>3.561396</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>56512094.7533578588</td>\n",
              "      <td>0.474618</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>22165858.8832652283</td>\n",
              "      <td>4.059610</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>79 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f56d7db-5a1b-4b6c-b551-a4c6ed8f183f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2f56d7db-5a1b-4b6c-b551-a4c6ed8f183f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2f56d7db-5a1b-4b6c-b551-a4c6ed8f183f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Prediction Analysis"
      ],
      "metadata": {
        "id": "bgUVx0uxASZd"
      },
      "id": "bgUVx0uxASZd"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since we have used a global explanation in our model, we can see the weights of features. They are already ranked based on their importance. As you can see:  new_or_returning_visitor, has_purchased, and count_add_to_cart_item are the top 3 most important feature that helps the model predict LTV. This is also true from a real-world perspective."
      ],
      "metadata": {
        "id": "2ttvNhnr1h9z"
      },
      "id": "2ttvNhnr1h9z"
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "#standardSQL\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  ML.GLOBAL_EXPLAIN(MODEL `{DATASET_NAME}.{model_name}`)\n",
        "\"\"\"\n",
        "\n",
        "query_job = client.query(query)\n",
        "features_weight = query_job.to_dataframe()\n",
        "features_weight"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "p5eBbra-McKk",
        "outputId": "a260ab61-39b1-4620-b852-64fc9a39f30e"
      },
      "id": "p5eBbra-McKk",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    trial_id                     feature  attribution\n",
              "0          1              user_pseudo_id     6.600509\n",
              "1          1    new_or_returning_visitor     0.977771\n",
              "2          1               has_purchased     0.965460\n",
              "3          1      count_add_to_cart_item     0.840053\n",
              "4          1                        city     0.778941\n",
              "5          1       engaged_session_event     0.776369\n",
              "6          1           count_select_item     0.745513\n",
              "7          1            unique_pageviews     0.693004\n",
              "8          1                   entrances     0.662958\n",
              "9          1             count_view_item     0.615643\n",
              "10         1            pagepath_level_1     0.606319\n",
              "11         1  previous_page_path_level_1     0.600073\n",
              "12         1                      region     0.582434\n",
              "13         1               count_of_days     0.485257\n",
              "14         1          count_total_events     0.453917\n",
              "15         1                     browser     0.410286\n",
              "16         1                  event_date     0.365257\n",
              "17         1              traffic_medium     0.343875\n",
              "18         1                     country     0.335532\n",
              "19         1    operating_system_version     0.312780\n",
              "20         1                    category     0.300878\n",
              "21         1              traffic_source     0.297022\n",
              "22         1               sub_continent     0.258846\n",
              "23         1                    campaign     0.255906\n",
              "24         1     second_pagepath_level_1     0.250377\n",
              "25         1        had_purchased_before     0.244932\n",
              "26         1           pages_per_session     0.239436\n",
              "27         1                   pageviews     0.236402\n",
              "28         1                   exit_rate     0.235602\n",
              "29         1     engagement_time_seconds     0.233144\n",
              "30         1   count_begin_checkout_item     0.223190\n",
              "31         1                       exits     0.217024\n",
              "32         1    landing_pagepath_level_1     0.199748\n",
              "33         1              total_sessions     0.189885\n",
              "34         1             browser_version     0.188679\n",
              "35         1                   continent     0.162059\n",
              "36         1           mobile_brand_name     0.158473\n",
              "37         1             engagement_rate     0.150353\n",
              "38         1               has_promotion     0.148801\n",
              "39         1                 bounce_rate     0.140031\n",
              "40         1            operating_system     0.129138\n",
              "41         1                        hour     0.053162"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2ac0b60-06fc-4d15-8e90-ae307ba963d8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trial_id</th>\n",
              "      <th>feature</th>\n",
              "      <th>attribution</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>user_pseudo_id</td>\n",
              "      <td>6.600509</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>new_or_returning_visitor</td>\n",
              "      <td>0.977771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>has_purchased</td>\n",
              "      <td>0.965460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>count_add_to_cart_item</td>\n",
              "      <td>0.840053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>city</td>\n",
              "      <td>0.778941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>engaged_session_event</td>\n",
              "      <td>0.776369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>count_select_item</td>\n",
              "      <td>0.745513</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>unique_pageviews</td>\n",
              "      <td>0.693004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1</td>\n",
              "      <td>entrances</td>\n",
              "      <td>0.662958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1</td>\n",
              "      <td>count_view_item</td>\n",
              "      <td>0.615643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1</td>\n",
              "      <td>pagepath_level_1</td>\n",
              "      <td>0.606319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1</td>\n",
              "      <td>previous_page_path_level_1</td>\n",
              "      <td>0.600073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1</td>\n",
              "      <td>region</td>\n",
              "      <td>0.582434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1</td>\n",
              "      <td>count_of_days</td>\n",
              "      <td>0.485257</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1</td>\n",
              "      <td>count_total_events</td>\n",
              "      <td>0.453917</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1</td>\n",
              "      <td>browser</td>\n",
              "      <td>0.410286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1</td>\n",
              "      <td>event_date</td>\n",
              "      <td>0.365257</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1</td>\n",
              "      <td>traffic_medium</td>\n",
              "      <td>0.343875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1</td>\n",
              "      <td>country</td>\n",
              "      <td>0.335532</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1</td>\n",
              "      <td>operating_system_version</td>\n",
              "      <td>0.312780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1</td>\n",
              "      <td>category</td>\n",
              "      <td>0.300878</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1</td>\n",
              "      <td>traffic_source</td>\n",
              "      <td>0.297022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1</td>\n",
              "      <td>sub_continent</td>\n",
              "      <td>0.258846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1</td>\n",
              "      <td>campaign</td>\n",
              "      <td>0.255906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1</td>\n",
              "      <td>second_pagepath_level_1</td>\n",
              "      <td>0.250377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>1</td>\n",
              "      <td>had_purchased_before</td>\n",
              "      <td>0.244932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>1</td>\n",
              "      <td>pages_per_session</td>\n",
              "      <td>0.239436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1</td>\n",
              "      <td>pageviews</td>\n",
              "      <td>0.236402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>1</td>\n",
              "      <td>exit_rate</td>\n",
              "      <td>0.235602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1</td>\n",
              "      <td>engagement_time_seconds</td>\n",
              "      <td>0.233144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>1</td>\n",
              "      <td>count_begin_checkout_item</td>\n",
              "      <td>0.223190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>1</td>\n",
              "      <td>exits</td>\n",
              "      <td>0.217024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>1</td>\n",
              "      <td>landing_pagepath_level_1</td>\n",
              "      <td>0.199748</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>1</td>\n",
              "      <td>total_sessions</td>\n",
              "      <td>0.189885</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>1</td>\n",
              "      <td>browser_version</td>\n",
              "      <td>0.188679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1</td>\n",
              "      <td>continent</td>\n",
              "      <td>0.162059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1</td>\n",
              "      <td>mobile_brand_name</td>\n",
              "      <td>0.158473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1</td>\n",
              "      <td>engagement_rate</td>\n",
              "      <td>0.150353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1</td>\n",
              "      <td>has_promotion</td>\n",
              "      <td>0.148801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1</td>\n",
              "      <td>bounce_rate</td>\n",
              "      <td>0.140031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>1</td>\n",
              "      <td>operating_system</td>\n",
              "      <td>0.129138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>1</td>\n",
              "      <td>hour</td>\n",
              "      <td>0.053162</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2ac0b60-06fc-4d15-8e90-ae307ba963d8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e2ac0b60-06fc-4d15-8e90-ae307ba963d8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e2ac0b60-06fc-4d15-8e90-ae307ba963d8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "At last, we can take this further and ask the model to give local explanations. It will provide row-level or user-level descriptions of essential features."
      ],
      "metadata": {
        "id": "rGCWrC_K2tTx"
      },
      "id": "rGCWrC_K2tTx"
    },
    {
      "cell_type": "code",
      "source": [
        "query = f\"\"\"\n",
        "SELECT\n",
        "  *\n",
        "FROM\n",
        "  ML.EXPLAIN_PREDICT(MODEL `{DATASET_NAME}.{model_name}`,\n",
        "    (\n",
        "    SELECT\n",
        "      *\n",
        "    FROM\n",
        "      `{PROJECT_ID}.{DATASET_NAME}.{feature_table}`\n",
        "    WHERE\n",
        "      ltv_revenue IS NOT NULL\n",
        "      ),\n",
        "    STRUCT(3 as top_k_features))\n",
        "\"\"\"\n",
        "\n",
        "query_job = client.query(query)\n",
        "explain_prediction_df = query_job.to_dataframe()\n",
        "# explain_prediction_df.head()\n",
        "columns_to_view = ['user_pseudo_id','predicted_ltv_revenue','ltv_revenue','top_feature_attributions','baseline_prediction_value','approximation_error']\n",
        "explain_prediction_df[explain_prediction_df['predicted_ltv_revenue']>10.0][columns_to_view].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ysmracjiM-0i",
        "outputId": "db28272f-7dee-4979-d212-5eae3883a757"
      },
      "id": "ysmracjiM-0i",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         user_pseudo_id  predicted_ltv_revenue  ltv_revenue  \\\n",
              "0    1188134.8498680538              13.582357          0.0   \n",
              "4   28134106.1591086954              20.380920          0.0   \n",
              "8    1160488.2375923167             268.351430        305.0   \n",
              "10  88839956.1260646312              12.794005          0.0   \n",
              "31  75073588.1859607099              16.606062         42.0   \n",
              "\n",
              "                             top_feature_attributions  \\\n",
              "0   [{'feature': 'previous_page_path_level_1', 'at...   \n",
              "4   [{'feature': 'user_pseudo_id', 'attribution': ...   \n",
              "8   [{'feature': 'count_begin_checkout_item', 'att...   \n",
              "10  [{'feature': 'user_pseudo_id', 'attribution': ...   \n",
              "31  [{'feature': 'user_pseudo_id', 'attribution': ...   \n",
              "\n",
              "    baseline_prediction_value  approximation_error  \n",
              "0                    0.047716                  0.0  \n",
              "4                    0.047716                  0.0  \n",
              "8                    0.047716                  0.0  \n",
              "10                   0.047716                  0.0  \n",
              "31                   0.047716                  0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e83af836-7cfc-4bdd-bce6-8a100b988005\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_pseudo_id</th>\n",
              "      <th>predicted_ltv_revenue</th>\n",
              "      <th>ltv_revenue</th>\n",
              "      <th>top_feature_attributions</th>\n",
              "      <th>baseline_prediction_value</th>\n",
              "      <th>approximation_error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1188134.8498680538</td>\n",
              "      <td>13.582357</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[{'feature': 'previous_page_path_level_1', 'at...</td>\n",
              "      <td>0.047716</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28134106.1591086954</td>\n",
              "      <td>20.380920</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[{'feature': 'user_pseudo_id', 'attribution': ...</td>\n",
              "      <td>0.047716</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1160488.2375923167</td>\n",
              "      <td>268.351430</td>\n",
              "      <td>305.0</td>\n",
              "      <td>[{'feature': 'count_begin_checkout_item', 'att...</td>\n",
              "      <td>0.047716</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>88839956.1260646312</td>\n",
              "      <td>12.794005</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[{'feature': 'user_pseudo_id', 'attribution': ...</td>\n",
              "      <td>0.047716</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>75073588.1859607099</td>\n",
              "      <td>16.606062</td>\n",
              "      <td>42.0</td>\n",
              "      <td>[{'feature': 'user_pseudo_id', 'attribution': ...</td>\n",
              "      <td>0.047716</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e83af836-7cfc-4bdd-bce6-8a100b988005')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e83af836-7cfc-4bdd-bce6-8a100b988005 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e83af836-7cfc-4bdd-bce6-8a100b988005');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can take the example of one user - '88839956.1260646312'\n",
        "You can see that the default LTV revenue was zero, and the model predicted 12.79.\n",
        "\n",
        "We can see why the user has some potential LTV since the user is a new_or_returning_visitor and the count_days of views are higher. Both the columns have boosted the user LTV and our model thinks that the user holds an excellent 12$ potential."
      ],
      "metadata": {
        "id": "EK3_jiBP3q5a"
      },
      "id": "EK3_jiBP3q5a"
    },
    {
      "cell_type": "code",
      "source": [
        "explain_prediction_df[explain_prediction_df['user_pseudo_id']=='88839956.1260646312'][['user_pseudo_id','predicted_ltv_revenue','ltv_revenue',\n",
        "                                                                                       'top_feature_attributions','baseline_prediction_value',\n",
        "                                                                                       'approximation_error']].iloc[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uECAEPJU2FK_",
        "outputId": "8f56f2cc-6d8a-45f2-8220-5cd12ae846ae"
      },
      "id": "uECAEPJU2FK_",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "user_pseudo_id                                             88839956.1260646312\n",
              "predicted_ltv_revenue                                                12.794005\n",
              "ltv_revenue                                                                0.0\n",
              "top_feature_attributions     [{'feature': 'user_pseudo_id', 'attribution': ...\n",
              "baseline_prediction_value                                             0.047716\n",
              "approximation_error                                                        0.0\n",
              "Name: 10, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explain_prediction_df[explain_prediction_df['user_pseudo_id']=='88839956.1260646312'][['user_pseudo_id','predicted_ltv_revenue','ltv_revenue',\n",
        "                                                                                       'top_feature_attributions','baseline_prediction_value',\n",
        "                                                                                       'approximation_error']].iloc[0]['top_feature_attributions']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hkvyyyOg2m-G",
        "outputId": "ed770df4-eaca-4557-c499-2228e6d9f387"
      },
      "id": "hkvyyyOg2m-G",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([{'feature': 'user_pseudo_id', 'attribution': 9.307687047563954},\n",
              "       {'feature': 'new_or_returning_visitor', 'attribution': 2.128990071393797},\n",
              "       {'feature': 'count_of_days', 'attribution': 1.6958306524167748}],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Next Steps\n",
        "\n",
        "Once you have the model ready, there can be multiple things that can be achieved through LTV\n",
        "\n",
        "\n",
        "1. Periodic LTV Monitoring:\n",
        "\n",
        "Monitoring your performance is a straightforward use of Future LTV that may be used. It is advisable to run the LTV calculation at least once every month and compare your performance to determine the efficacy of your marketing initiatives, in terms of increasing the lifetime value of your clients.\n",
        "\n",
        "2. Develop your marketing approach\n",
        "\n",
        "It is possible to study the impact that a number of different variables have on the average lifespan of a customer by using a number of different \"if-then\" scenarios. You are able to determine which factors may be altered in order to bring about a different response from the target audience. For instance, you may discover that lowering the price of your items not only encourages people to purchase from you more frequently but also results in a lower turnover rate among those customers. You can improve the worth of your consumers during their lifespan by lowering the prices of certain of your items, which you can do now that you have this additional knowledge.\n",
        "\n",
        "3. Determine which of your marketing avenues bring in the most revenue.\n",
        "\n",
        "You are able to examine LTV on a channel-by-channel, campaign-by-campaign, source-by-source, and medium-by-medium basis by using the reports that Google Analytics provides. LTV is able to inform you whether or not you are spending too little or too much money on each of these channels. The following is an excellent illustration of this: If you determine that the LTV of email is x dollar, but the LTV of a Facebook channel is x+100 dollar, then you should spend twice as much time on Facebook as you do on email since you know the Facebook channel is more valuable.\n",
        "\n",
        "4. Establish a customer-loyalty programme.\n",
        "\n",
        "You are able to divide your consumers into groups according to the amount of money they are expected to spend over the course of their lifetime, and then tailor the way you communicate with each of those groups. Keeping this in mind, you may devise a customer loyalty programme that tailors its communications and offers of enticement to the specific needs of various subsets of your clientele, while also continuing to track and evaluate the program's performance."
      ],
      "metadata": {
        "id": "MneZoCsCAjeT"
      },
      "id": "MneZoCsCAjeT"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Clean Up"
      ],
      "metadata": {
        "id": "bdeJo1Q7d-xY"
      },
      "id": "bdeJo1Q7d-xY"
    },
    {
      "cell_type": "code",
      "source": [
        "# # Are you sure you want to do this? This is to delete all models\n",
        "# models = client.list_models(dataset_id) # Make an API request.\n",
        "# for model in models:\n",
        "#     full_model_id = f\"{model.dataset_id}.{model.model_id}\"\n",
        "#     client.delete_model(full_model_id)  # Make an API request.\n",
        "#     print(f\"Deleted: {full_model_id}\")\n",
        "# # Are you sure you want to do this? This is to delete all tables and views\n",
        "# tables = client.list_tables(dataset_id)  # Make an API request.\n",
        "# for table in tables:\n",
        "#     full_table_id = f\"{table.dataset_id}.{table.table_id}\"\n",
        "#     client.delete_table(full_table_id)  # Make an API request.\n",
        "#     print(f\"Deleted: {full_table_id}\")"
      ],
      "metadata": {
        "id": "vFSfNFYMeFIN"
      },
      "id": "vFSfNFYMeFIN",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "environment": {
      "kernel": "python3",
      "name": "common-cpu.m87",
      "type": "gcloud",
      "uri": "gcr.io/deeplearning-platform-release/base-cpu:m87"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.12"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "MneZoCsCAjeT"
      ]
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}